<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="clr-namespace:Quan.ControlLibrary">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Quan.ControlLibrary;component/Themes/Styles/Basic/Common.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <ControlTemplate x:Key="Quan.Templates.ValidationError">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <AdornedElementPlaceholder x:Name="Placeholder">
                <Grid x:Name="PopupGrid" Visibility="Collapsed">
                    <Rectangle
                        x:Name="PopupTargetElement"
                        Margin="-5,0"
                        DataContext="{Binding ElementName=Placeholder}"
                        StrokeThickness="0" />
                    <Grid
                        x:Name="RedTriangle"
                        Width="8"
                        Height="8"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Top"
                        Background="Transparent"
                        SnapsToDevicePixels="True">
                        <Path Data="M 0,0 8,0 8,8" Fill="{DynamicResource Quan.Brushes.Error}" />
                    </Grid>
                    <local:QuanPopup
                        x:Name="ValidationPopup"
                        AdornedElement="{Binding ElementName=Placeholder, Path=AdornedElement, Mode=OneWay}"
                        AllowsTransparency="True"
                        IsOpen="False"
                        Placement="{Binding ElementName=Placeholder, Path=AdornedElement.(local:ValidationHelper.PopupPlacement), Mode=OneWay}"
                        PlacementTarget="{Binding ElementName=PopupTargetElement, Mode=OneWay}">
                        <Border Margin="5" Background="{Binding ElementName=Placeholder, Path=AdornedElement.(local:ValidationHelper.Background)}" CornerRadius="2">
                            <Border.Effect>
                                <DropShadowEffect
                                    Opacity=".42"
                                    RenderingBias="Performance"
                                    ShadowDepth="4"
                                    Color="{DynamicResource Quan.Colors.Shadow}" />
                            </Border.Effect>
                            <Border.Resources>
                                <DataTemplate DataType="{x:Type ValidationError}">
                                    <TextBlock
                                        MaxWidth="250"
                                        Margin="8,4,8,4"
                                        FontSize="{Binding ElementName=Placeholder, Path=AdornedElement.(local:ValidationHelper.FontSize)}"
                                        Foreground="{DynamicResource Quan.Brushes.ForegroundHighLight}"
                                        Text="{Binding ErrorContent, Mode=OneTime}"
                                        TextWrapping="Wrap"
                                        UseLayoutRounding="False" />
                                </DataTemplate>
                            </Border.Resources>
                            <ItemsControl ItemsSource="{Binding}" />
                            <Border.Style>
                                <Style TargetType="Border">
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Trigger.EnterActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.15" Duration="0:0:0.1" />
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </Trigger.EnterActions>
                                            <Trigger.ExitActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.1" />
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </Trigger.ExitActions>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                        </Border>
                    </local:QuanPopup>
                </Grid>
            </AdornedElementPlaceholder>
            <Border
                x:Name="ValidationText"
                Grid.Row="1"
                Padding="0,2"
                Background="{Binding ElementName=Placeholder, Path=AdornedElement.(local:ValidationHelper.Background)}"
                CornerRadius="5"
                Visibility="Collapsed">
                <TextBlock
                    MaxWidth="{Binding ElementName=Placeholder, Path=ActualWidth}"
                    HorizontalAlignment="{Binding ElementName=Placeholder, Path=AdornedElement.(local:ValidationHelper.HorizontalAlignment)}"
                    FontSize="{Binding ElementName=Placeholder, Path=AdornedElement.(local:ValidationHelper.FontSize)}"
                    Foreground="{DynamicResource Quan.Brushes.Error}"
                    Text="{Binding ElementName=Placeholder, Path=AdornedElement.(Validation.Errors)/ErrorContent}"
                    TextWrapping="Wrap"
                    UseLayoutRounding="False" />
            </Border>
        </Grid>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(local:ValidationHelper.DisplayMode)}" Value="Popup">
                <Setter TargetName="PopupGrid" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(local:ValidationHelper.DisplayMode)}" Value="Text">
                <Setter TargetName="ValidationText" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(local:ValidationHelper.PopupPlacement)}" Value="Top">
                <Setter TargetName="PopupTargetElement" Property="Margin" Value="0,-5" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(local:ValidationHelper.PopupPlacement)}" Value="Bottom">
                <Setter TargetName="PopupTargetElement" Property="Margin" Value="0,-5" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=ValidationPopup, Path=CanShow, Mode=OneWay}" Value="True" />
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.IsKeyboardFocusWithin, Mode=OneWay}" Value="True" />
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(Validation.HasError), Mode=OneWay}" Value="True" />
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(local:ValidationHelper.DisplayMode)}" Value="Popup" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="ValidationPopup" Property="IsOpen" Value="True" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=RedTriangle, Path=IsMouseOver, Mode=OneWay}" Value="True" />
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(Validation.HasError), Mode=OneWay}" Value="True" />
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(local:ValidationHelper.ShowValidationErrorOnMouseOver), Mode=OneWay}" Value="True" />
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(local:ValidationHelper.DisplayMode)}" Value="Popup" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="ValidationPopup" Property="IsOpen" Value="True" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
</ResourceDictionary>