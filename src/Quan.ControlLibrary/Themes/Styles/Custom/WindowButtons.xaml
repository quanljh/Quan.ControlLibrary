<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:Quan.ControlLibrary.Controls"
    xmlns:controlzex="urn:controlzex"
    xmlns:converters="clr-namespace:Quan.ControlLibrary.Converters"
    xmlns:enums="clr-namespace:Quan.ControlLibrary.Enums">

    <ControlTemplate x:Key="Quan.Templates.WindowButtons.Default" TargetType="{x:Type controls:WindowButtons}">
        <StackPanel Orientation="Horizontal">
            <Button
                x:Name="PART_Min"
                controlzex:NonClientControlProperties.ClickStrategy="MouseEvent"
                controlzex:NonClientControlProperties.HitTestResult="MINBUTTON"
                AutomationProperties.AutomationId="Minimize"
                AutomationProperties.Name="Minimize"
                Command="{x:Static SystemCommands.MinimizeWindowCommand}"
                Focusable="False"
                IsEnabled="{Binding IsMinButtonEnabled, RelativeSource={RelativeSource AncestorType={x:Type controls:QuanWindow}}}"
                ToolTip="{Binding Minimize, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                <Button.Visibility>
                    <MultiBinding Converter="{converters:ResizeModeMinMaxButtonVisibilityConverter}" ConverterParameter="{x:Static enums:ResizeModeButtonType.Min}">
                        <Binding Mode="OneWay" Path="ShowMinButton" RelativeSource="{RelativeSource AncestorType={x:Type controls:QuanWindow}}" />
                        <Binding Mode="OneWay" Path="ResizeMode" RelativeSource="{RelativeSource AncestorType={x:Type controls:QuanWindow}}" />
                    </MultiBinding>
                </Button.Visibility>
                <Path Data="F1M0,6L0,9 9,9 9,6 0,6z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" SnapsToDevicePixels="True" />
            </Button>
            <Button
                x:Name="PART_Max"
                controlzex:NonClientControlProperties.ClickStrategy="MouseEvent"
                controlzex:NonClientControlProperties.HitTestResult="MAXBUTTON"
                AutomationProperties.AutomationId="MaximizeRestore"
                AutomationProperties.Name="Maximize"
                Command="{x:Static SystemCommands.MaximizeWindowCommand}"
                Focusable="False"
                IsEnabled="{Binding IsMaxRestoreButtonEnabled, RelativeSource={RelativeSource AncestorType={x:Type controls:QuanWindow}}}"
                ToolTip="{Binding Maximize, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                <Button.Visibility>
                    <MultiBinding Converter="{converters:ResizeModeMinMaxButtonVisibilityConverter}" ConverterParameter="{x:Static enums:ResizeModeButtonType.Max}">
                        <Binding Mode="OneWay" Path="ShowMaxRestoreButton" RelativeSource="{RelativeSource AncestorType={x:Type controls:QuanWindow}}" />
                        <Binding Mode="OneWay" Path="ResizeMode" RelativeSource="{RelativeSource AncestorType={x:Type controls:QuanWindow}}" />
                    </MultiBinding>
                </Button.Visibility>
                <!--  normal state  -->
                <Path
                    x:Name="PART_MaxPath"
                    Width="10"
                    Height="10"
                    Data="F1M0,0L0,9 9,9 9,0 0,0 0,3 8,3 8,8 1,8 1,3z"
                    Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                    SnapsToDevicePixels="True" />
            </Button>
            <Button
                x:Name="PART_Close"
                controlzex:NonClientControlProperties.ClickStrategy="MouseEvent"
                controlzex:NonClientControlProperties.HitTestResult="CLOSE"
                AutomationProperties.AutomationId="Close"
                AutomationProperties.Name="Close"
                Command="{x:Static SystemCommands.CloseWindowCommand}"
                Focusable="False"
                IsEnabled="{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:QuanWindow}}, Path=IsCloseButtonEnabled, Mode=OneWay}"
                RenderOptions.EdgeMode="Aliased"
                ToolTip="{Binding Close, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                <Button.Visibility>
                    <MultiBinding Converter="{converters:ResizeModeMinMaxButtonVisibilityConverter}" ConverterParameter="{x:Static enums:ResizeModeButtonType.Close}">
                        <Binding Mode="OneWay" Path="ShowCloseButton" RelativeSource="{RelativeSource AncestorType={x:Type controls:QuanWindow}}" />
                    </MultiBinding>
                </Button.Visibility>
                <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                    <Line
                        SnapsToDevicePixels="True"
                        Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                        StrokeThickness="2.5"
                        X1="1"
                        X2="9"
                        Y1="1"
                        Y2="9" />
                    <Line
                        SnapsToDevicePixels="True"
                        Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                        StrokeThickness="2.5"
                        X1="1"
                        X2="9"
                        Y1="9"
                        Y2="1" />
                </Grid>
            </Button>
        </StackPanel>
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:QuanWindow}}, Path=IsCloseButtonEnabled}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:QuanWindow}}, Path=IsAnyDialogOpen}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:QuanWindow}}, Path=IsCloseButtonEnabledWithDialog}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_Close" Property="IsEnabled" Value="False" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:QuanWindow}}, Path=WindowState}" Value="Maximized">
                <Setter TargetName="PART_Max" Property="AutomationProperties.Name" Value="Restore" />
                <Setter TargetName="PART_Max" Property="Command" Value="{x:Static SystemCommands.RestoreWindowCommand}" />
                <Setter TargetName="PART_Max" Property="ToolTip" Value="{Binding Restore, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                <Setter TargetName="PART_MaxPath" Property="Data" Value="F1M0,10L0,3 3,3 3,0 10,0 10,2 4,2 4,3 7,3 7,6 6,6 6,5 1,5 1,10z M1,10L7,10 7,7 10,7 10,2 9,2 9,6 6,6 6,9 1,9z" />
            </DataTrigger>
            <Trigger Property="Theme" Value="Light">
                <Setter TargetName="PART_Close" Property="Style" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=LightCloseButtonStyle}" />
                <Setter TargetName="PART_Max" Property="Style" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=LightMaxButtonStyle}" />
                <Setter TargetName="PART_Min" Property="Style" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=LightMinButtonStyle}" />
            </Trigger>
            <Trigger Property="Theme" Value="Dark">
                <Setter TargetName="PART_Close" Property="Style" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DarkCloseButtonStyle}" />
                <Setter TargetName="PART_Max" Property="Style" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DarkMaxButtonStyle}" />
                <Setter TargetName="PART_Min" Property="Style" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DarkMinButtonStyle}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="Quan.Templates.WindowButtons.Win10" TargetType="{x:Type controls:WindowButtons}">
        <StackPanel Orientation="Horizontal">
            <Button
                x:Name="PART_Min"
                Width="46"
                controlzex:NonClientControlProperties.ClickStrategy="MouseEvent"
                controlzex:NonClientControlProperties.HitTestResult="MINBUTTON"
                AutomationProperties.AutomationId="Minimize"
                AutomationProperties.Name="Minimize"
                Command="{x:Static SystemCommands.MinimizeWindowCommand}"
                Focusable="False"
                IsEnabled="{Binding IsMinButtonEnabled, RelativeSource={RelativeSource AncestorType={x:Type controls:QuanWindow}}}"
                ToolTip="{Binding Minimize, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                UseLayoutRounding="True">
                <Button.Visibility>
                    <MultiBinding Converter="{converters:ResizeModeMinMaxButtonVisibilityConverter}" ConverterParameter="{x:Static enums:ResizeModeButtonType.Min}">
                        <Binding Mode="OneWay" Path="ShowMinButton" RelativeSource="{RelativeSource AncestorType={x:Type controls:QuanWindow}}" />
                        <Binding Mode="OneWay" Path="ResizeMode" RelativeSource="{RelativeSource AncestorType={x:Type controls:QuanWindow}}" />
                    </MultiBinding>
                </Button.Visibility>
                <Path
                    Width="10"
                    Height="10"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="M0,0L10,0 10,1 10,1 1,1 0,1z"
                    Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                    RenderOptions.EdgeMode="Aliased"
                    SnapsToDevicePixels="True"
                    Stretch="Uniform" />
            </Button>
            <Button
                x:Name="PART_Max"
                Width="46"
                controlzex:NonClientControlProperties.ClickStrategy="MouseEvent"
                controlzex:NonClientControlProperties.HitTestResult="MAXBUTTON"
                AutomationProperties.AutomationId="MaximizeRestore"
                AutomationProperties.Name="Maximize"
                Command="{x:Static SystemCommands.MaximizeWindowCommand}"
                Focusable="False"
                IsEnabled="{Binding IsMaxRestoreButtonEnabled, RelativeSource={RelativeSource AncestorType={x:Type controls:QuanWindow}}}"
                ToolTip="{Binding Maximize, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                UseLayoutRounding="True">
                <Button.Visibility>
                    <MultiBinding Converter="{converters:ResizeModeMinMaxButtonVisibilityConverter}" ConverterParameter="{x:Static enums:ResizeModeButtonType.Max}">
                        <Binding Mode="OneWay" Path="ShowMaxRestoreButton" RelativeSource="{RelativeSource AncestorType={x:Type controls:QuanWindow}}" />
                        <Binding Mode="OneWay" Path="ResizeMode" RelativeSource="{RelativeSource AncestorType={x:Type controls:QuanWindow}}" />
                    </MultiBinding>
                </Button.Visibility>
                <!--  normal state  -->
                <Path
                    x:Name="PART_MaxPath"
                    Width="10"
                    Height="10"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="M1,1L1,11 11,11 11,1z M0,0L12,0 12,12 0,12z"
                    Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                    RenderOptions.EdgeMode="Aliased"
                    SnapsToDevicePixels="True"
                    Stretch="Uniform" />
            </Button>
            <Button
                x:Name="PART_Close"
                Width="46"
                controlzex:NonClientControlProperties.ClickStrategy="MouseEvent"
                controlzex:NonClientControlProperties.HitTestResult="CLOSE"
                AutomationProperties.AutomationId="Close"
                AutomationProperties.Name="Close"
                Command="{x:Static SystemCommands.CloseWindowCommand}"
                Focusable="False"
                IsEnabled="{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:QuanWindow}}, Path=IsCloseButtonEnabled, Mode=OneWay}"
                ToolTip="{Binding Close, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                UseLayoutRounding="True">
                <Button.Visibility>
                    <MultiBinding Converter="{converters:ResizeModeMinMaxButtonVisibilityConverter}" ConverterParameter="{x:Static enums:ResizeModeButtonType.Close}">
                        <Binding Mode="OneWay" Path="ShowCloseButton" RelativeSource="{RelativeSource AncestorType={x:Type controls:QuanWindow}}" />
                    </MultiBinding>
                </Button.Visibility>
                <Path
                    Width="10"
                    Height="10"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="F1M8.583,8L13,12.424 12.424,13 8,8.583 3.576,13 3,12.424 7.417,8 3,3.576 3.576,3 8,7.417 12.424,3 13,3.576z"
                    Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                    RenderOptions.EdgeMode="Aliased"
                    SnapsToDevicePixels="True"
                    Stretch="Uniform" />
            </Button>
        </StackPanel>
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:QuanWindow}}, Path=IsCloseButtonEnabled}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:QuanWindow}}, Path=IsAnyDialogOpen}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:QuanWindow}}, Path=IsCloseButtonEnabledWithDialog}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_Close" Property="IsEnabled" Value="False" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:QuanWindow}}, Path=WindowState}" Value="Maximized">
                <Setter TargetName="PART_Max" Property="AutomationProperties.Name" Value="Restore" />
                <Setter TargetName="PART_Max" Property="Command" Value="{x:Static SystemCommands.RestoreWindowCommand}" />
                <Setter TargetName="PART_Max" Property="ToolTip" Value="{Binding Restore, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                <Setter TargetName="PART_MaxPath" Property="Data" Value="M1,4.56L1,14.56 11,14.56 11,4.56z M4,1L4,3.56 12,3.56 12,11 14,11 14,1z M3,0L15,0 15,12 12,12 12,15.56 0,15.56 0,3.56 3,3.56z" />
            </DataTrigger>
            <Trigger Property="Theme" Value="Light">
                <Setter TargetName="PART_Close" Property="Style" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=LightCloseButtonStyle}" />
                <Setter TargetName="PART_Max" Property="Style" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=LightMaxButtonStyle}" />
                <Setter TargetName="PART_Min" Property="Style" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=LightMinButtonStyle}" />
            </Trigger>
            <Trigger Property="Theme" Value="Dark">
                <Setter TargetName="PART_Close" Property="Style" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DarkCloseButtonStyle}" />
                <Setter TargetName="PART_Max" Property="Style" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DarkMaxButtonStyle}" />
                <Setter TargetName="PART_Min" Property="Style" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DarkMinButtonStyle}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  base button style for min, max and close window buttons  -->
    <Style x:Key="Quan.Styles.Button.Window.Base" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource Quan.Brushes.Transparent}" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Opacity" Value="0.8" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentControl
                            x:Name="PART_ContentPresenter"
                            Padding="{TemplateBinding Padding}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Quan.Brushes.WindowButtons.Background.MouseOver}" />
                <Setter Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource Quan.Brushes.AccentBase}" />
                <Setter Property="Foreground" Value="{DynamicResource Quan.Brushes.ForegroundHighLight}" />
            </Trigger>
            <Trigger Property="controlzex:NonClientControlProperties.IsNCMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource Quan.Brushes.WindowButtons.Background.MouseOver}" />
                <Setter Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="controlzex:NonClientControlProperties.IsNCPressed" Value="true">
                <Setter Property="Background" Value="{DynamicResource Quan.Brushes.AccentBase}" />
                <Setter Property="Foreground" Value="{DynamicResource Quan.Brushes.ForegroundHighLight}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Quan.Brushes.ForegroundDisabled}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Quan.Styles.Button.Window.Light" BasedOn="{StaticResource Quan.Styles.Button.Window.Base}" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="MaxHeight" Value="34" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Width" Value="34" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Quan.Brushes.WindowButtons.Background.MouseOver}" />
                <Setter Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource Quan.Brushes.AccentBase}" />
                <Setter Property="Foreground" Value="{DynamicResource Quan.Brushes.ForegroundHighLight}" />
            </Trigger>
            <Trigger Property="controlzex:NonClientControlProperties.IsNCMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource Quan.Brushes.WindowButtons.Background.MouseOver}" />
                <Setter Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="controlzex:NonClientControlProperties.IsNCPressed" Value="true">
                <Setter Property="Background" Value="{DynamicResource Quan.Brushes.AccentBase}" />
                <Setter Property="Foreground" Value="{DynamicResource Quan.Brushes.ForegroundHighLight}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Quan.Brushes.ForegroundDisabled}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Quan.Styles.Button.Window.Dark" BasedOn="{StaticResource Quan.Styles.Button.Window.Light}" TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Quan.Brushes.WindowButtons.Background.MouseOver}" />
                <Setter Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource Quan.Brushes.AccentBase}" />
                <Setter Property="Foreground" Value="{DynamicResource Quan.Brushes.ForegroundHighLight}" />
            </Trigger>
            <Trigger Property="controlzex:NonClientControlProperties.IsNCMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource Quan.Brushes.WindowButtons.Background.MouseOver}" />
                <Setter Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="controlzex:NonClientControlProperties.IsNCPressed" Value="true">
                <Setter Property="Background" Value="{DynamicResource Quan.Brushes.AccentBase}" />
                <Setter Property="Foreground" Value="{DynamicResource Quan.Brushes.ForegroundHighLight}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Quan.Brushes.ForegroundDisabled}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Quan.Styles.Button.Window.Close.Light" BasedOn="{StaticResource Quan.Styles.Button.Window.Light}" TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#E81123" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
            <Trigger Property="controlzex:NonClientControlProperties.IsNCMouseOver" Value="True">
                <Setter Property="Background" Value="#E81123" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#F1707A" />
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
            <Trigger Property="controlzex:NonClientControlProperties.IsNCPressed" Value="True">
                <Setter Property="Background" Value="#F1707A" />
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Quan.Styles.Button.Window.Close.Dark" BasedOn="{StaticResource Quan.Styles.Button.Window.Dark}" TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#E81123" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
            <Trigger Property="controlzex:NonClientControlProperties.IsNCMouseOver" Value="True">
                <Setter Property="Background" Value="#E81123" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#F1707A" />
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
            <Trigger Property="controlzex:NonClientControlProperties.IsNCPressed" Value="True">
                <Setter Property="Background" Value="#F1707A" />
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Quan.Styles.WindowButtons.Default" TargetType="{x:Type controls:WindowButtons}">
        <Setter Property="Background" Value="{DynamicResource Quan.Brushes.Transparent}" />
        <Setter Property="DarkCloseButtonStyle" Value="{StaticResource Quan.Styles.Button.Window.Close.Dark}" />
        <Setter Property="DarkMaxButtonStyle" Value="{StaticResource Quan.Styles.Button.Window.Dark}" />
        <Setter Property="DarkMinButtonStyle" Value="{StaticResource Quan.Styles.Button.Window.Dark}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{DynamicResource Quan.Brushes.ForegroundHighLight}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="LightCloseButtonStyle" Value="{StaticResource Quan.Styles.Button.Window.Close.Light}" />
        <Setter Property="LightMaxButtonStyle" Value="{StaticResource Quan.Styles.Button.Window.Light}" />
        <Setter Property="LightMinButtonStyle" Value="{StaticResource Quan.Styles.Button.Window.Light}" />
        <Setter Property="Template" Value="{StaticResource Quan.Templates.WindowButtons.Default}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <Style x:Key="Quan.Styles.WindowButtons" BasedOn="{StaticResource Quan.Styles.WindowButtons.Default}" TargetType="{x:Type controls:WindowButtons}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding ParentWindow.ShowTitleBar, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource Quan.Brushes.ForegroundHighLight}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Quan.Styles.WindowButtons.Win10" BasedOn="{StaticResource Quan.Styles.WindowButtons.Default}" TargetType="{x:Type controls:WindowButtons}">
        <Setter Property="Template" Value="{StaticResource Quan.Templates.WindowButtons.Win10}" />
    </Style>

    <Style BasedOn="{StaticResource Quan.Styles.WindowButtons.Win10}" TargetType="{x:Type controls:WindowButtons}" />
</ResourceDictionary>