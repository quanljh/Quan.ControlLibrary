<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:system="clr-namespace:System;assembly=mscorlib" xmlns:local="clr-namespace:Quan.ControlLibrary" xmlns:o="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options">
  <FontFamily x:Key="Quan.Fonts.Regular">pack://application:,,,/Quan.ControlLibrary;component/Resources/Fonts/#Noto Sans</FontFamily>
  <FontFamily x:Key="Quan.Fonts.FontAwesome">pack://application:,,,/Quan.ControlLibrary;component/Resources/Fonts/#FontAwesome</FontFamily>
  <system:Double x:Key="Quan.FontSize.VeryVerySmall">6</system:Double>
  <system:Double x:Key="Quan.FontSize.VerySmall">8</system:Double>
  <system:Double x:Key="Quan.FontSize.Smaller">10</system:Double>
  <system:Double x:Key="Quan.FontSize.Small">12</system:Double>
  <system:Double x:Key="Quan.FontSize.Regular">14</system:Double>
  <system:Double x:Key="Quan.FontSize.Bigger">16</system:Double>
  <system:Double x:Key="Quan.FontSize.Large">20</system:Double>
  <system:Double x:Key="Quan.FontSize.XLarge">24</system:Double>
  <system:Double x:Key="Quan.FontSize.XXLarge">30</system:Double>
  <system:String x:Key="Quan.FontIcons.Close"></system:String>
  <system:String x:Key="Quan.FontIcons.Search"></system:String>
  <system:String x:Key="Quan.FontIcons.Chevron-Down"></system:String>
  <Geometry x:Key="CloseGeometry" o:Freeze="True">M0.7,0 L5,4.3 L9.3,0 L10,0.7 L5.7,5 L10,9.3 L9.3,10 L5,5.7 L0.7,10 L0,9.3 L4.3,5 L0,0.7 z</Geometry>
  <Geometry x:Key="WindowMinGeometry" o:Freeze="True">M0,4 L10,4 L10,5 L0,5 z</Geometry>
  <Geometry x:Key="WindowRestoreGeometry" o:Freeze="True">M1,3 L1,9 L7,9 L7,3 z M3,1 L3,2 L8,2 L8,7 L9,7 L9,1 z M2,0 L10,0 L10,8 L8,8 L8,10 L0,10 L0,2 L2,2 z</Geometry>
  <Geometry x:Key="WindowMaxGeometry" o:Freeze="True">M1,1 L1,9 L9,9 L9,1 z M0,0 L10,0 L10,10 L0,10 z</Geometry>
  <CircleEase x:Key="Quan.EasingFuns.CircleOut" EasingMode="EaseOut" />
  <CircleEase x:Key="Quan.EasingFuns.CircleInOut" EasingMode="EaseInOut" />
  <CubicEase x:Key="Quan.EasingFuns.CubicInOut" EasingMode="EaseInOut" />
  <Style x:Key="Quan.Styles.ContentControl.Default" TargetType="{x:Type ContentControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContentControl}">
          <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Quan.Styles.ScrollViewer.Default" TargetType="{x:Type ScrollViewer}">
    <Setter Property="CanContentScroll" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <!--<Rectangle
                            x:Name="Corner"
                            Grid.Row="1"
                            Grid.Column="1"
                            Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />-->
            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.Row="0" Grid.Column="0" Margin="{TemplateBinding Padding}" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
            <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Row="0" Grid.Column="1" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Row="1" Grid.Column="0" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type local:QuanRipple}">
    <Setter Property="RecognizesAccessKey" Value="True" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="ClipToBounds" Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:RippleHelper.ClipToBounds)}" />
    <Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:RippleHelper.Background)}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:QuanRipple}">
          <Grid Background="Transparent">
            <Canvas HorizontalAlignment="Stretch" VerticalAlignment="Stretch" IsHitTestVisible="False">
              <Ellipse x:Name="PART_Ellipse" Canvas.Left="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleX}" Canvas.Top="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleY}" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Diameter}" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Diameter}" Fill="{TemplateBinding Fill}" Opacity="0" RenderTransformOrigin="0.5,0.5">
                <Ellipse.RenderTransform>
                  <TransformGroup>
                    <ScaleTransform x:Name="ScaleTransform" ScaleX="0" ScaleY="0" />
                  </TransformGroup>
                </Ellipse.RenderTransform>
              </Ellipse>
              <Canvas.Style>
                <Style TargetType="{x:Type Canvas}">
                  <Setter Property="ZIndex" Value="0" />
                  <Style.Triggers>
                    <Trigger Property="local:RippleHelper.ShowOnTop" Value="True">
                      <Setter Property="ZIndex" Value="2" />
                    </Trigger>
                  </Style.Triggers>
                </Style>
              </Canvas.Style>
            </Canvas>
            <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Panel.ZIndex="1" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" RecognizesAccessKey="{TemplateBinding RecognizesAccessKey}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="MouseDown">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleX">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:1.2" Value="1">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseIn" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleY">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:1.2" Value="1">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseIn" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ellipse" Storyboard.TargetProperty="Opacity">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value=".26" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="MouseDown" To="MouseUp">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleX">
                        <EasingDoubleKeyFrame KeyTime="0:0:0.12" Value="0">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseIn" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleY">
                        <EasingDoubleKeyFrame KeyTime="0:0:0.12" Value="0">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseIn" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ellipse" Storyboard.TargetProperty="Opacity">
                        <EasingDoubleKeyFrame KeyTime="0:0:0.12" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="MouseDown" To="Normal">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleX">
                        <EasingDoubleKeyFrame x:Name="MouseDownToNormalScaleXKeyFrame" KeyTime="0:0:0.30" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.50" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.50" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleY">
                        <EasingDoubleKeyFrame x:Name="MouseDownToNormalScaleYKeyFrame" KeyTime="0:0:0.30" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.50" Value="1" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.50" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ellipse" Storyboard.TargetProperty="Opacity">
                        <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value=".26" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.30" Value=".26" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.50" Value="0">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <SineEase EasingMode="EaseOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleX" To="0" />
                    <DoubleAnimation Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleY" To="0" />
                    <DoubleAnimation Storyboard.TargetName="PART_Ellipse" Storyboard.TargetProperty="Opacity" To="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="MouseDown">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleX" To="1" />
                    <DoubleAnimation Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleY" To="1" />
                    <DoubleAnimation Storyboard.TargetName="PART_Ellipse" Storyboard.TargetProperty="Opacity" To="0.26" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="MouseUp">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleX" To="0" />
                    <DoubleAnimation Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleY" To="0" />
                    <DoubleAnimation Storyboard.TargetName="PART_Ellipse" Storyboard.TargetProperty="Opacity" To="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="Quan.Templates.QuanButton.Default" TargetType="{x:Type local:QuanButton}">
    <Grid>
      <AdornerDecorator>
        <Border x:Name="PART_Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(local:ShadowHelper.ShadowEffect), Converter={local:ShadowConverter}}" />
      </AdornerDecorator>
      <local:QuanRipple Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
        <local:QuanRipple.Clip>
          <MultiBinding Converter="{local:BorderClipConverter}">
            <Binding ElementName="PART_Border" Path="ActualHeight" />
            <Binding ElementName="PART_Border" Path="ActualWidth" />
            <Binding ElementName="PART_Border" Path="CornerRadius" />
            <Binding ElementName="PART_Border" Path="BorderThickness" />
          </MultiBinding>
        </local:QuanRipple.Clip>
      </local:QuanRipple>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="0.23" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="PART_Border" Property="local:ShadowHelper.Darken" Value="True" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="Quan.Templates.QuanButton.Flat" TargetType="{x:Type local:QuanButton}">
    <Grid>
      <AdornerDecorator>
        <Border x:Name="PART_Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" />
      </AdornerDecorator>
      <local:QuanRipple Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
        <local:QuanRipple.Clip>
          <MultiBinding Converter="{local:BorderClipConverter}">
            <Binding ElementName="PART_Border" Path="ActualHeight" />
            <Binding ElementName="PART_Border" Path="ActualWidth" />
            <Binding ElementName="PART_Border" Path="CornerRadius" />
            <Binding ElementName="PART_Border" Path="BorderThickness" />
          </MultiBinding>
        </local:QuanRipple.Clip>
      </local:QuanRipple>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="0.23" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="PART_Border" Property="Background" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={local:BrushOpacityConverter}, ConverterParameter=0.16}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Storyboard x:Key="Quan.Storyboards.TextBox.GotFocus" o:Freeze="True">
    <DoubleAnimation Storyboard.TargetName="PART_GuideMessage" Storyboard.TargetProperty="Opacity" To="0.2" Duration="0:0:0.2" />
  </Storyboard>
  <Storyboard x:Key="Quan.Storyboards.TextBox.LostFocus" o:Freeze="True">
    <DoubleAnimation Storyboard.TargetName="PART_GuideMessage" Storyboard.TargetProperty="Opacity" Duration="0:0:0.2" />
  </Storyboard>
  <system:Double x:Key="TitleBarHeight">32</system:Double>
  <SolidColorBrush x:Key="Quan.Brushes.Background" o:Freeze="True" Color="{DynamicResource Quan.Colors.Background}" />
  <SolidColorBrush x:Key="Quan.Brushes.BackgroundLight" o:Freeze="True" Color="{DynamicResource Quan.Colors.BackgroundLight}" />
  <SolidColorBrush x:Key="Quan.Brushes.Border" o:Freeze="True" Color="{DynamicResource Quan.Colors.BorderBrush}" />
  <SolidColorBrush x:Key="Quan.Brushes.Foreground" o:Freeze="True" Color="{DynamicResource Quan.Colors.Foreground}" />
  <SolidColorBrush x:Key="Quan.Brushes.ForegroundLight" o:Freeze="True" Color="{DynamicResource Quan.Colors.ForegroundLight}" />
  <SolidColorBrush x:Key="Quan.Brushes.ForegroundHighLight" o:Freeze="True" Color="{DynamicResource Quan.Colors.ForegroundHighLight}" />
  <SolidColorBrush x:Key="Quan.Brushes.IconHover" o:Freeze="True" Color="{DynamicResource Quan.Colors.IconHover}" />
  <SolidColorBrush x:Key="Quan.Brushes.IconForeground" o:Freeze="True" Color="{DynamicResource Quan.Colors.IconForeground}" />
  <SolidColorBrush x:Key="Quan.Brushes.Primary" o:Freeze="True" Color="{DynamicResource Quan.Colors.Primary}" />
  <SolidColorBrush x:Key="Quan.Brushes.LightPrimary" o:Freeze="True" Color="{DynamicResource Quan.Colors.LightPrimary}" />
  <SolidColorBrush x:Key="Quan.Brushes.VeryLightPrimary" o:Freeze="True" Color="{DynamicResource Quan.Colors.VeryLightPrimary}" />
  <SolidColorBrush x:Key="Quan.Brushes.DarkPrimary" o:Freeze="True" Color="{DynamicResource Quan.Colors.DarkPrimary}" />
  <SolidColorBrush x:Key="Quan.Brushes.Warning" o:Freeze="True" Color="{DynamicResource Quan.Colors.Warning}" />
  <SolidColorBrush x:Key="Quan.Brushes.Error" o:Freeze="True" Color="{DynamicResource Quan.Colors.Error}" />
  <SolidColorBrush x:Key="Quan.Brushes.Success" o:Freeze="True" Color="{DynamicResource Quan.Colors.Success}" />
  <SolidColorBrush x:Key="Quan.Brushes.Focus" o:Freeze="True" Color="{DynamicResource Quan.Colors.Focus}" />
  <SolidColorBrush x:Key="Quan.Brushes.Disabled" o:Freeze="True" Color="{DynamicResource Quan.Colors.Disabled}" />
  <SolidColorBrush x:Key="Quan.Brushes.Gray1" o:Freeze="True" Color="{DynamicResource Quan.Colors.Gray1}" />
  <SolidColorBrush x:Key="Quan.Brushes.Gray2" o:Freeze="True" Color="{DynamicResource Quan.Colors.Gray2}" />
  <SolidColorBrush x:Key="Quan.Brushes.Gray3" o:Freeze="True" Color="{DynamicResource Quan.Colors.Gray3}" />
  <SolidColorBrush x:Key="Quan.Brushes.Gray4" o:Freeze="True" Color="{DynamicResource Quan.Colors.Gray4}" />
  <SolidColorBrush x:Key="Quan.Brushes.Gray5" o:Freeze="True" Color="{DynamicResource Quan.Colors.Gray5}" />
  <SolidColorBrush x:Key="Quan.Brushes.Gray6" o:Freeze="True" Color="{DynamicResource Quan.Colors.Gray6}" />
  <SolidColorBrush x:Key="Quan.Brushes.Gray7" o:Freeze="True" Color="{DynamicResource Quan.Colors.Gray7}" />
  <SolidColorBrush x:Key="Quan.Brushes.Gray8" o:Freeze="True" Color="{DynamicResource Quan.Colors.Gray8}" />
  <SolidColorBrush x:Key="Quan.Brushes.Gray9" o:Freeze="True" Color="{DynamicResource Quan.Colors.Gray9}" />
  <SolidColorBrush x:Key="Quan.Brushes.Gray10" o:Freeze="True" Color="{DynamicResource Quan.Colors.Gray10}" />
  <SolidColorBrush x:Key="Quan.Brushes.Shadow" o:Freeze="True" Color="{DynamicResource Quan.Colors.Shadow}" />
  <SolidColorBrush x:Key="Quan.Brushes.WindowBorder" o:Freeze="True" Color="{DynamicResource Quan.Colors.WindowBorder}" />
  <Style x:Key="Quan.Styles.Common.FocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="1" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeDashArray="1 2" StrokeThickness="1" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Quan.Styles.Common.BaseStyle" TargetType="Control">
    <Setter Property="Foreground" Value="{DynamicResource Quan.Brushes.Foreground}" />
    <Setter Property="FontFamily" Value="{StaticResource Quan.Fonts.Regular}" />
    <Setter Property="FontSize" Value="{StaticResource Quan.FontSize.Regular}" />
    <Setter Property="FocusVisualStyle" Value="{StaticResource Quan.Styles.Common.FocusVisual}" />
  </Style>
  <DropShadowEffect x:Key="Quan.ShadowEffects.Effect0" o:Freeze="True" BlurRadius="10" Opacity="1" RenderingBias="Performance" ShadowDepth="0" Color="{DynamicResource Quan.Colors.Shadow}" />
  <DropShadowEffect x:Key="Quan.ShadowEffects.Effect1" o:Freeze="True" BlurRadius="5" Direction="270" Opacity=".42" RenderingBias="Performance" ShadowDepth="1" Color="{DynamicResource Quan.Colors.Shadow}" />
  <DropShadowEffect x:Key="Quan.ShadowEffects.Effect2" o:Freeze="True" BlurRadius="8" Direction="270" Opacity=".42" RenderingBias="Performance" ShadowDepth="1.5" Color="{DynamicResource Quan.Colors.Shadow}" />
  <DropShadowEffect x:Key="Quan.ShadowEffects.Effect3" o:Freeze="True" BlurRadius="14" Direction="270" Opacity=".42" RenderingBias="Performance" ShadowDepth="4.5" Color="{DynamicResource Quan.Colors.Shadow}" />
  <DropShadowEffect x:Key="Quan.ShadowEffects.Effect4" o:Freeze="True" BlurRadius="25" Direction="270" Opacity=".42" RenderingBias="Performance" ShadowDepth="8" Color="{DynamicResource Quan.Colors.Shadow}" />
  <DropShadowEffect x:Key="Quan.ShadowEffects.Effect5" o:Freeze="True" BlurRadius="35" Direction="270" Opacity=".42" RenderingBias="Performance" ShadowDepth="13" Color="{DynamicResource Quan.Colors.Shadow}" />
  <ControlTemplate x:Key="Quan.Templates.ValidationError">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="*" />
        <RowDefinition Height="Auto" />
      </Grid.RowDefinitions>
      <AdornedElementPlaceholder x:Name="Placeholder">
        <Grid x:Name="PopupGrid" Visibility="Collapsed">
          <Rectangle x:Name="PopupTargetElement" Margin="-5,0" DataContext="{Binding ElementName=Placeholder}" StrokeThickness="0" />
          <Grid x:Name="RedTriangle" Width="8" Height="8" HorizontalAlignment="Right" VerticalAlignment="Top" Background="Transparent" SnapsToDevicePixels="True">
            <Path Data="M 0,0 8,0 8,8" Fill="{DynamicResource Quan.Brushes.Error}" />
          </Grid>
          <local:QuanPopup x:Name="ValidationPopup" AdornedElement="{Binding ElementName=Placeholder, Path=AdornedElement, Mode=OneWay}" AllowsTransparency="True" IsOpen="False" Placement="{Binding ElementName=Placeholder, Path=AdornedElement.(local:ValidationHelper.PopupPlacement), Mode=OneWay}" PlacementTarget="{Binding ElementName=PopupTargetElement, Mode=OneWay}">
            <Border Margin="5" Background="{Binding ElementName=Placeholder, Path=AdornedElement.(local:ValidationHelper.Background)}" CornerRadius="2">
              <Border.Effect>
                <DropShadowEffect Opacity=".42" RenderingBias="Performance" ShadowDepth="4" Color="{DynamicResource Quan.Colors.Shadow}" />
              </Border.Effect>
              <Border.Resources>
                <DataTemplate DataType="{x:Type ValidationError}">
                  <TextBlock MaxWidth="250" Margin="8,4,8,4" FontSize="{Binding ElementName=Placeholder, Path=AdornedElement.(local:ValidationHelper.FontSize)}" Foreground="{DynamicResource Quan.Brushes.ForegroundHighLight}" Text="{Binding ErrorContent, Mode=OneTime}" TextWrapping="Wrap" UseLayoutRounding="False" />
                </DataTemplate>
              </Border.Resources>
              <ItemsControl ItemsSource="{Binding}" />
              <Border.Style>
                <Style TargetType="Border">
                  <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                      <Trigger.EnterActions>
                        <BeginStoryboard>
                          <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.15" Duration="0:0:0.1" />
                          </Storyboard>
                        </BeginStoryboard>
                      </Trigger.EnterActions>
                      <Trigger.ExitActions>
                        <BeginStoryboard>
                          <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.1" />
                          </Storyboard>
                        </BeginStoryboard>
                      </Trigger.ExitActions>
                    </Trigger>
                  </Style.Triggers>
                </Style>
              </Border.Style>
            </Border>
          </local:QuanPopup>
        </Grid>
      </AdornedElementPlaceholder>
      <Border x:Name="ValidationText" Grid.Row="1" Padding="0,2" Background="{Binding ElementName=Placeholder, Path=AdornedElement.(local:ValidationHelper.Background)}" CornerRadius="5" Visibility="Collapsed">
        <TextBlock MaxWidth="{Binding ElementName=Placeholder, Path=ActualWidth}" HorizontalAlignment="{Binding ElementName=Placeholder, Path=AdornedElement.(local:ValidationHelper.HorizontalAlignment)}" FontSize="{Binding ElementName=Placeholder, Path=AdornedElement.(local:ValidationHelper.FontSize)}" Foreground="{DynamicResource Quan.Brushes.Error}" Text="{Binding ElementName=Placeholder, Path=AdornedElement.(Validation.Errors)/ErrorContent}" TextWrapping="Wrap" UseLayoutRounding="False" />
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <DataTrigger Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(local:ValidationHelper.DisplayMode)}" Value="Popup">
        <Setter TargetName="PopupGrid" Property="Visibility" Value="Visible" />
      </DataTrigger>
      <DataTrigger Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(local:ValidationHelper.DisplayMode)}" Value="Text">
        <Setter TargetName="ValidationText" Property="Visibility" Value="Visible" />
      </DataTrigger>
      <DataTrigger Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(local:ValidationHelper.PopupPlacement)}" Value="Top">
        <Setter TargetName="PopupTargetElement" Property="Margin" Value="0,-5" />
      </DataTrigger>
      <DataTrigger Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(local:ValidationHelper.PopupPlacement)}" Value="Bottom">
        <Setter TargetName="PopupTargetElement" Property="Margin" Value="0,-5" />
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding ElementName=ValidationPopup, Path=CanShow, Mode=OneWay}" Value="True" />
          <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.IsKeyboardFocusWithin, Mode=OneWay}" Value="True" />
          <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(Validation.HasError), Mode=OneWay}" Value="True" />
          <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(local:ValidationHelper.DisplayMode)}" Value="Popup" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="ValidationPopup" Property="IsOpen" Value="True" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding ElementName=RedTriangle, Path=IsMouseOver, Mode=OneWay}" Value="True" />
          <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(Validation.HasError), Mode=OneWay}" Value="True" />
          <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(local:ValidationHelper.ShowValidationErrorOnMouseOver), Mode=OneWay}" Value="True" />
          <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(local:ValidationHelper.DisplayMode)}" Value="Popup" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="ValidationPopup" Property="IsOpen" Value="True" />
      </MultiDataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="Quan.Styles.Thumb.ScrollBar" TargetType="{x:Type Thumb}">
    <Setter Property="IsTabStop" Value="false" />
    <Setter Property="Opacity" Value="0.5" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Background="{DynamicResource Quan.Brushes.Primary}" CornerRadius="5" Opacity="{TemplateBinding Opacity}" SnapsToDevicePixels="True" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Quan.Styles.ScrollBar.Default" TargetType="{x:Type ScrollBar}">
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
    <Setter Property="Width" Value="14" />
    <Setter Property="Margin" Value="-14,0,0,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollBar}">
          <Border x:Name="PART_Border" Background="Transparent" RenderTransformOrigin="1,0.5" SnapsToDevicePixels="true">
            <Track x:Name="PART_Track" Width="8" HorizontalAlignment="Right" IsDirectionReversed="True" IsEnabled="{TemplateBinding IsMouseOver}">
              <Track.DecreaseRepeatButton>
                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Opacity="0" />
              </Track.DecreaseRepeatButton>
              <Track.Thumb>
                <Thumb x:Name="PART_Thumb" Style="{StaticResource Quan.Styles.Thumb.ScrollBar}" />
              </Track.Thumb>
              <Track.IncreaseRepeatButton>
                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Opacity="0" />
              </Track.IncreaseRepeatButton>
            </Track>
          </Border>
          <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="MouseEnter">
              <BeginStoryboard>
                <Storyboard>
                  <DoubleAnimation Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="Width" To="13" Duration="0:0:0.3" />
                  <ThicknessAnimation Storyboard.TargetName="PART_Border" Storyboard.TargetProperty="Padding" To="0 0 1 0" Duration="0:0:0.15" />
                  <DoubleAnimation Storyboard.TargetName="PART_Thumb" Storyboard.TargetProperty="Opacity" To="0.75" Duration="0:0:0.3" />
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave">
              <BeginStoryboard>
                <Storyboard>
                  <DoubleAnimation Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="Width" To="8" Duration="0:0:0.3" />
                  <ThicknessAnimation Storyboard.TargetName="PART_Border" Storyboard.TargetProperty="Padding" To="0" Duration="0:0:0.15" />
                  <DoubleAnimation Storyboard.TargetName="PART_Thumb" Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.3" />
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Horizontal">
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="Height" Value="14" />
        <Setter Property="Margin" Value="0,-14,0,0" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ScrollBar}">
              <Border x:Name="PART_Border" RenderTransformOrigin="0.5,1" SnapsToDevicePixels="true">
                <Track x:Name="PART_Track" Height="8" VerticalAlignment="Bottom" IsEnabled="{TemplateBinding IsMouseOver}">
                  <Track.DecreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Opacity="0" />
                  </Track.DecreaseRepeatButton>
                  <Track.Thumb>
                    <Thumb x:Name="PART_Thumb" Style="{StaticResource Quan.Styles.Thumb.ScrollBar}" />
                  </Track.Thumb>
                  <Track.IncreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Opacity="0" />
                  </Track.IncreaseRepeatButton>
                </Track>
              </Border>
              <ControlTemplate.Triggers>
                <EventTrigger RoutedEvent="MouseEnter">
                  <BeginStoryboard>
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="Height" To="13" Duration="0:0:0.3" />
                      <ThicknessAnimation Storyboard.TargetName="PART_Border" Storyboard.TargetProperty="Padding" To="0 0 0 1" Duration="0:0:0.15" />
                      <DoubleAnimation Storyboard.TargetName="PART_Thumb" Storyboard.TargetProperty="Opacity" To="0.75" Duration="0:0:0.3" />
                    </Storyboard>
                  </BeginStoryboard>
                </EventTrigger>
                <EventTrigger RoutedEvent="MouseLeave">
                  <BeginStoryboard>
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="Height" To="8" Duration="0:0:0.3" />
                      <ThicknessAnimation Storyboard.TargetName="PART_Border" Storyboard.TargetProperty="Padding" To="0" Duration="0:0:0.15" />
                      <DoubleAnimation Storyboard.TargetName="PART_Thumb" Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.3" />
                    </Storyboard>
                  </BeginStoryboard>
                </EventTrigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style BasedOn="{StaticResource Quan.Styles.ScrollBar.Default}" TargetType="{x:Type ScrollBar}" />
  <Style BasedOn="{StaticResource Quan.Styles.ScrollViewer.Default}" TargetType="{x:Type ScrollViewer}" />
  <Style x:Key="Quan.Styles.Button.BaseBase" BasedOn="{StaticResource Quan.Styles.Common.BaseStyle}" TargetType="{x:Type ButtonBase}">
    <Setter Property="Height" Value="30" />
    <Setter Property="BorderBrush" Value="{DynamicResource Quan.Brushes.Border}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
  </Style>
  <Style x:Key="Quan.Styles.Button.Base" BasedOn="{StaticResource Quan.Styles.Button.BaseBase}" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="{DynamicResource Quan.Brushes.Background}" />
    <Setter Property="local:BorderHelper.CornerRadius" Value="5" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(local:BorderHelper.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <StackPanel Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Orientation="Horizontal">
              <Path x:Name="IconContent" Width="{TemplateBinding local:IconHelper.Width}" Height="{TemplateBinding local:IconHelper.Height}" Data="{TemplateBinding local:IconHelper.Geometry}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" />
              <ContentPresenter x:Name="ContentPresenter" Margin="6,0,0,0" VerticalAlignment="Center" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </StackPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Content" Value="{x:Null}">
              <Setter TargetName="ContentPresenter" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="local:IconHelper.Geometry" Value="{x:Null}">
              <Setter TargetName="IconContent" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="ContentPresenter" Property="Margin" Value="0" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Opacity" Value="0.9" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Opacity" Value="0.6" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="0.4" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Quan.Styles.Button.Icon" BasedOn="{StaticResource Quan.Styles.Button.Base}" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="local:BorderHelper.CornerRadius" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(local:BorderHelper.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <ContentControl Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
              <Path Width="{TemplateBinding local:IconHelper.Width}" Height="{TemplateBinding local:IconHelper.Height}" Data="{TemplateBinding local:IconHelper.Geometry}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" />
            </ContentControl>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="Quan.Templates.Button.FontIcon" TargetType="{x:Type Button}">
    <Grid Background="{TemplateBinding Background}">
      <ContentPresenter x:Name="PART_ContentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="PART_ContentPresenter" Property="Opacity" Value=".75" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="PART_ContentPresenter" Property="Opacity" Value=".5" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource Quan.Brushes.Disabled}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="Quan.Styles.Button.FontIcon" TargetType="{x:Type Button}">
    <Setter Property="FontFamily" Value="{StaticResource Quan.Fonts.FontAwesome}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="FontSize" Value="{StaticResource Quan.FontSize.Large}" />
    <Setter Property="Foreground" Value="{DynamicResource Quan.Brushes.Border}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template" Value="{StaticResource Quan.Templates.Button.FontIcon}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
  </Style>
  <Style TargetType="{x:Type PasswordBox}">
    <Setter Property="FontFamily" Value="{StaticResource Quan.Fonts.Regular}" />
    <Setter Property="FontSize" Value="{StaticResource Quan.FontSize.Regular}" />
    <Setter Property="Padding" Value="10" />
    <Setter Property="Margin" Value="0,5" />
    <Setter Property="BorderBrush" Value="{DynamicResource Quan.Brushes.Border}" />
    <Setter Property="BorderThickness" Value="0,0,0,1" />
    <Setter Property="Background" Value="{DynamicResource Quan.Brushes.Background}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type PasswordBox}">
          <Grid>
            <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
              <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
            </Border>
            <TextBlock x:Name="placeholder" Padding="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="Center" FontFamily="{StaticResource LatoThin}" FontSize="{TemplateBinding FontSize}" IsHitTestVisible="False" Text="{TemplateBinding Tag}" Visibility="{TemplateBinding local:HasTextProperty.Value,&#xD;&#xA;                                                         Converter={local:BooleanToHiddenConverter}}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="border" Property="Opacity" Value="0.56" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Quan.Brushes.PrimaryColorBrush}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
              <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Quan.Brushes.FocusColorBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type ListBoxItem}">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Padding" Value="5" />
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="FocusVisualStyle" Value="{StaticResource Quan.Styles.Common.FocusVisual}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Border x:Name="PART_Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="{TemplateBinding ClipToBounds}" SnapsToDevicePixels="true">
            <Grid>
              <Rectangle x:Name="PART_HoverRect" Fill="{DynamicResource Quan.Brushes.Primary}" Opacity="0" />
              <Rectangle x:Name="PART_SelectRect" Fill="{DynamicResource Quan.Brushes.Primary}" Opacity="0" />
              <local:QuanRipple Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Fill="{DynamicResource Quan.Brushes.LightPrimary}" Focusable="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.3" To="Normal">
                    <VisualTransition.GeneratedEasingFunction>
                      <CircleEase EasingMode="EaseOut" />
                    </VisualTransition.GeneratedEasingFunction>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState Name="Normal" />
                <VisualState Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PART_HoverRect" Storyboard.TargetProperty="Opacity" To="0.15" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState Name="Disabled" />
              </VisualStateGroup>
              <VisualStateGroup Name="SelectionStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.6" />
                </VisualStateGroup.Transitions>
                <VisualState Name="Selected">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PART_SelectRect" Storyboard.TargetProperty="Opacity" To="0.2" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState Name="Unselected" />
                <!--<VisualState Name="SelectedUnfocused">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="PART_SelectRect"
                                            Storyboard.TargetProperty="Opacity"
                                            To="0.03"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>-->
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="PART_Border" Property="Opacity" Value=".56" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Quan.Styles.ListBox.Default" TargetType="{x:Type ListBox}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="BorderBrush" Value="{DynamicResource Quan.Brushes.Border}" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
    <Setter Property="ScrollViewer.PanningMode" Value="Both" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBox}">
          <Border Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <ScrollViewer Padding="{TemplateBinding Padding}" Focusable="false">
              <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </ScrollViewer>
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsGrouping" Value="true" />
                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
              </MultiTrigger.Conditions>
              <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource Quan.Styles.ListBox.Default}" TargetType="{x:Type ListBox}" />
  <Style TargetType="{x:Type local:QuanRippleLine}">
    <Setter Property="Background" Value="{Binding Path=(local:RippleHelper.Background), RelativeSource={RelativeSource Self}}" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Bottom" />
    <Setter Property="Height" Value="2" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:QuanRippleLine}">
          <Border x:Name="PART_RippleLine" Height="{TemplateBinding Height}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}" IsHitTestVisible="False" RenderTransformOrigin="0.5,0.5" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
            <Border.RenderTransform>
              <ScaleTransform ScaleX="0" ScaleY="1" />
            </Border.RenderTransform>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="ActivationStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Inactive" To="Active">
                    <Storyboard>
                      <DoubleAnimation EasingFunction="{StaticResource Quan.EasingFuns.CircleOut}" Storyboard.TargetName="PART_RippleLine" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" To="1" Duration="0:0:0.3" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Active" To="Inactive">
                    <Storyboard>
                      <DoubleAnimation EasingFunction="{StaticResource Quan.EasingFuns.CircleOut}" Storyboard.TargetName="PART_RippleLine" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" To="0" Duration="0:0:0.3" />
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Active">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PART_RippleLine" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Inactive">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PART_RippleLine" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" To="0" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type local:QuanFloatingText}">
    <Setter Property="IsHitTestVisible" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Bottom" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:QuanFloatingText}">
          <Grid Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
            <ContentControl x:Name="FloatingContent" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding FloatingText}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" IsHitTestVisible="False" IsTabStop="False" Opacity="{TemplateBinding FloatingOpacity}" RenderTransformOrigin="0,0" Visibility="{TemplateBinding IsUseFloating,&#xD;&#xA;                                                         Converter={local:BooleanToCollapsedConverter},&#xD;&#xA;                                                         ConverterParameter=True}" />
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="ContentStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition To="FloatingPosition">
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="FloatingContent" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition To="FocusedPosition">
                    <Storyboard>
                      <DoubleAnimation EasingFunction="{StaticResource Quan.EasingFuns.CircleOut}" Storyboard.TargetName="FloatingContent" Storyboard.TargetProperty="Opacity" To="0.2" Duration="0:0:0.3" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition To="OriginalPosition">
                    <Storyboard>
                      <DoubleAnimation EasingFunction="{StaticResource Quan.EasingFuns.CircleOut}" Storyboard.TargetName="FloatingContent" Storyboard.TargetProperty="Opacity" Duration="0:0:0.3" />
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="FloatingPosition">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="FloatingContent" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="FocusedPosition">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="FloatingContent" Storyboard.TargetProperty="Opacity" To="0.2" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="OriginalPosition">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="FloatingContent" Storyboard.TargetProperty="Opacity" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsUseFloating" Value="True">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type local:QuanFloatingText}">
              <Grid Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
                <local:QuanScaleHost x:Name="ScaleHost" />
                <ContentControl x:Name="FloatingContent" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding FloatingText}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" IsHitTestVisible="False" IsTabStop="False" Opacity="{TemplateBinding FloatingOpacity}" RenderTransformOrigin="0,0" Visibility="{TemplateBinding IsUseFloating,&#xD;&#xA;                                                                 Converter={local:BooleanToCollapsedConverter}}">
                  <ContentControl.RenderTransform>
                    <MultiBinding Converter="{local:FloatingTextTransformConverter}">
                      <Binding ElementName="ScaleHost" Path="Scale" />
                      <Binding Path="FloatingScale" RelativeSource="{RelativeSource TemplatedParent}" />
                      <Binding Path="FloatingOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                    </MultiBinding>
                  </ContentControl.RenderTransform>
                </ContentControl>
                <VisualStateManager.VisualStateGroups>
                  <VisualStateGroup x:Name="ContentStates">
                    <VisualStateGroup.Transitions>
                      <VisualTransition To="FloatingPosition">
                        <Storyboard>
                          <DoubleAnimation EasingFunction="{StaticResource Quan.EasingFuns.CircleOut}" Storyboard.TargetName="FloatingContent" Storyboard.TargetProperty="Opacity" To="{TemplateBinding FloatingOpacity}" Duration="0:0:0.3" />
                          <DoubleAnimation Storyboard.TargetName="ScaleHost" Storyboard.TargetProperty="Scale" To="1" Duration="0:0:0.3" />
                        </Storyboard>
                      </VisualTransition>
                      <VisualTransition To="OriginalPosition">
                        <Storyboard>
                          <DoubleAnimation EasingFunction="{StaticResource Quan.EasingFuns.CircleOut}" Storyboard.TargetName="FloatingContent" Storyboard.TargetProperty="Opacity" Duration="0:0:0.3" />
                          <DoubleAnimation EasingFunction="{StaticResource Quan.EasingFuns.CircleOut}" Storyboard.TargetName="ScaleHost" Storyboard.TargetProperty="Scale" Duration="0:0:0.3" />
                        </Storyboard>
                      </VisualTransition>
                    </VisualStateGroup.Transitions>
                    <VisualState x:Name="FloatingPosition">
                      <Storyboard>
                        <DoubleAnimation Storyboard.TargetName="FloatingContent" Storyboard.TargetProperty="Opacity" To="{TemplateBinding FloatingOpacity}" Duration="0" />
                        <DoubleAnimation Storyboard.TargetName="ScaleHost" Storyboard.TargetProperty="Scale" To="1" Duration="0" />
                      </Storyboard>
                    </VisualState>
                    <VisualState x:Name="OriginalPosition">
                      <Storyboard>
                        <DoubleAnimation Storyboard.TargetName="FloatingContent" Storyboard.TargetProperty="Opacity" Duration="0" />
                        <DoubleAnimation Storyboard.TargetName="ScaleHost" Storyboard.TargetProperty="Scale" Duration="0" />
                      </Storyboard>
                    </VisualState>
                  </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
              </Grid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type local:QuanButton}">
    <Setter Property="Background" Value="{DynamicResource Quan.Brushes.LightPrimary}" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="Foreground" Value="{DynamicResource Quan.Brushes.ForegroundHighLight}" />
    <Setter Property="local:RippleHelper.Background" Value="{DynamicResource Quan.Brushes.Background}" />
    <Setter Property="TextBlock.FontWeight" Value="Medium" />
    <Setter Property="TextBlock.FontSize" Value="14" />
    <Setter Property="CornerRadius" Value="2" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="local:ShadowHelper.ShadowEffect" Value="Effect2" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Height" Value="32" />
    <Setter Property="Template" Value="{StaticResource Quan.Templates.QuanButton.Default}" />
    <Style.Triggers>
      <Trigger Property="DisplayMode" Value="Flat">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource Quan.Brushes.LightPrimary}" />
        <Setter Property="local:RippleHelper.Background" Value="{DynamicResource Quan.Brushes.LightPrimary}" />
        <Setter Property="Template" Value="{StaticResource Quan.Templates.QuanButton.Flat}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="Quan.Templates.QuanTextBox.Default" TargetType="{x:Type local:QuanTextBox}">
    <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
      <AdornerDecorator>
        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding local:BorderHelper.CornerRadius}">
          <Grid Margin="{TemplateBinding BorderThickness}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <ScrollViewer x:Name="PART_ContentHost" Margin="0" Padding="{TemplateBinding Padding}" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
            <TextBlock x:Name="PART_GuideMessage" Grid.Column="0" Margin="5,0,0,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FontFamily="{TemplateBinding FontFamily}" IsHitTestVisible="False" Opacity="{TemplateBinding local:TextBoxHelper.GuideTextOpacity}" Text="{TemplateBinding local:TextBoxHelper.GuideText}" Visibility="{Binding Path=(local:TextBoxHelper.HasText), RelativeSource={RelativeSource TemplatedParent}, Converter={local:BooleanToCollapsedConverter}, ConverterParameter=True}" />
            <Button x:Name="PART_ClearTextButton" Grid.Column="1" Width="26" local:TextBoxHelper.IsUseClearButton="{TemplateBinding local:TextBoxHelper.IsShowClearButton}" Content="{StaticResource Quan.FontIcons.Close}" Focusable="False" Foreground="{TemplateBinding BorderBrush}" IsTabStop="False" Style="{StaticResource Quan.Styles.Button.FontIcon}" Visibility="Collapsed" />
            <Border x:Name="PART_DividingLine" Grid.Column="2" Width="1" Margin="0,3" Background="{TemplateBinding BorderBrush}" Visibility="Collapsed" />
            <Button x:Name="PART_FunctionButton" Grid.Column="3" Width="26" local:TextBoxHelper.IsUseFunctionButton="{TemplateBinding local:TextBoxHelper.IsShowFunctionButton}" Content="{TemplateBinding local:TextBoxHelper.FunctionButtonContent}" Focusable="False" Foreground="{TemplateBinding BorderBrush}" IsTabStop="False" Style="{StaticResource Quan.Styles.Button.FontIcon}" Visibility="{TemplateBinding local:TextBoxHelper.IsShowFunctionButton,&#xD;&#xA;                                                         Converter={local:BooleanToCollapsedConverter}}" />
          </Grid>
        </Border>
      </AdornerDecorator>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="0.56" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="BorderBrush" Value="{DynamicResource Quan.Brushes.LightPrimary}" />
      </Trigger>
      <Trigger Property="IsKeyboardFocused" Value="True">
        <Setter Property="BorderBrush" Value="{DynamicResource Quan.Brushes.Primary}" />
      </Trigger>
      <Trigger Property="IsReadOnly" Value="True">
        <Setter TargetName="PART_ClearTextButton" Property="IsEnabled" Value="False" />
      </Trigger>
      <Trigger Property="Validation.HasError" Value="true">
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Quan.Brushes.Error}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Validation.HasError" Value="True" />
          <Condition Property="IsVisible" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource Quan.Templates.ValidationError}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="local:TextBoxHelper.HasText" Value="False" />
          <Condition Property="IsFocused" Value="True" />
        </MultiTrigger.Conditions>
        <MultiTrigger.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource Quan.Storyboards.TextBox.GotFocus}" />
        </MultiTrigger.EnterActions>
        <MultiTrigger.ExitActions>
          <BeginStoryboard Storyboard="{StaticResource Quan.Storyboards.TextBox.LostFocus}" />
        </MultiTrigger.ExitActions>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="local:TextBoxHelper.HasText" Value="True" />
          <Condition Property="local:TextBoxHelper.IsShowClearButton" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ClearTextButton" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="local:TextBoxHelper.IsShowClearButton" Value="True" />
          <Condition Property="local:TextBoxHelper.IsShowFunctionButton" Value="True" />
          <Condition Property="local:TextBoxHelper.HasText" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_DividingLine" Property="Visibility" Value="Visible" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="Quan.Templates.QuanTextBox.Floating" TargetType="{x:Type local:QuanTextBox}">
    <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
      <AdornerDecorator>
        <Border x:Name="PART_Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding local:BorderHelper.CornerRadius}">
          <Grid Margin="{TemplateBinding BorderThickness}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
              <!--<ColumnDefinition Width="Auto" />-->
            </Grid.ColumnDefinitions>
            <ScrollViewer x:Name="PART_ContentHost" Margin="0" Padding="{TemplateBinding Padding}" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
            <local:QuanFloatingText x:Name="PART_GuideMessage" Grid.Column="0" Margin="5,0,0,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FloatingOffset="{TemplateBinding local:FloatingTextHelper.FloatingOffset}" FloatingOpacity="{TemplateBinding local:FloatingTextHelper.FloatingOpacity}" FloatingProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static local:FloatingProxyFabricConverter.Instance}}" FloatingScale="{TemplateBinding local:FloatingTextHelper.FloatingScale}" FloatingText="{TemplateBinding local:TextBoxHelper.GuideText}" FontFamily="{TemplateBinding FontFamily}" IsUseFloating="{TemplateBinding local:FloatingTextHelper.IsUseFloating}" />
            <Button x:Name="PART_ClearTextButton" Grid.Column="1" Width="26" local:TextBoxHelper.IsUseClearButton="{TemplateBinding local:TextBoxHelper.IsShowClearButton}" Content="{StaticResource Quan.FontIcons.Close}" Focusable="False" Foreground="{TemplateBinding BorderBrush}" IsTabStop="False" Style="{StaticResource Quan.Styles.Button.FontIcon}" Visibility="Collapsed" />
          </Grid>
        </Border>
      </AdornerDecorator>
      <!--  Ripple underline  -->
      <local:QuanRippleLine x:Name="PART_RippleLine" Background="{TemplateBinding local:RippleHelper.Background}" CornerRadius="{TemplateBinding local:BorderHelper.CornerRadius}" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="0.56" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="BorderBrush" Value="{DynamicResource Quan.Brushes.LightPrimary}" />
      </Trigger>
      <Trigger Property="IsKeyboardFocused" Value="True">
        <Setter TargetName="PART_RippleLine" Property="IsActive" Value="True" />
        <Setter Property="BorderBrush" Value="{DynamicResource Quan.Brushes.Primary}" />
      </Trigger>
      <Trigger Property="IsReadOnly" Value="True">
        <Setter TargetName="PART_ClearTextButton" Property="IsEnabled" Value="False" />
      </Trigger>
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="BorderBrush" Value="{DynamicResource Quan.Brushes.Error}" />
        <Setter TargetName="PART_RippleLine" Property="Background" Value="{DynamicResource Quan.Brushes.Error}" />
      </Trigger>
      <!--  Trigger the rendering of the AdornerLayer by reSetting the error template  -->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Validation.HasError" Value="True" />
          <Condition Property="IsVisible" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource Quan.Templates.ValidationError}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="local:FloatingTextHelper.IsUseFloating" Value="True" />
          <Condition Property="IsKeyboardFocused" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_GuideMessage" Property="Foreground" Value="{Binding Path=(local:FloatingTextHelper.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="PART_GuideMessage" Property="FloatingOpacity" Value="1" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="local:TextBoxHelper.HasText" Value="True" />
          <Condition Property="local:TextBoxHelper.IsShowClearButton" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ClearTextButton" Property="Visibility" Value="Visible" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="Quan.Styles.QuanTextBox.Default" TargetType="{x:Type local:QuanTextBox}">
    <Setter Property="FontFamily" Value="{StaticResource Quan.Fonts.Regular}" />
    <Setter Property="FontSize" Value="{StaticResource Quan.FontSize.Regular}" />
    <Setter Property="BorderBrush" Value="{DynamicResource Quan.Brushes.Border}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Background" Value="{DynamicResource Quan.Brushes.Background}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Padding" Value="3,0" />
    <Setter Property="CaretBrush" Value="{DynamicResource Quan.Brushes.Primary}" />
    <Setter Property="MinHeight" Value="26" />
    <Setter Property="Template" Value="{StaticResource Quan.Templates.QuanTextBox.Default}" />
    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
    <Setter Property="local:TextBoxHelper.IsMonitoring" Value="True" />
    <Setter Property="local:ValidationHelper.DisplayMode" Value="Popup" />
    <Setter Property="local:ValidationHelper.Background" Value="{DynamicResource Quan.Brushes.Error}" />
    <Setter Property="local:ValidationHelper.FontSize" Value="{Binding RelativeSource={RelativeSource Self}, Path=FontSize}" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Style.Triggers>
      <Trigger Property="DisplayMode" Value="Floating">
        <Setter Property="Template" Value="{StaticResource Quan.Templates.QuanTextBox.Floating}" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="local:FloatingTextHelper.Foreground" Value="{DynamicResource Quan.Brushes.Primary}" />
        <Setter Property="local:FloatingTextHelper.IsUseFloating" Value="True" />
        <Setter Property="local:ValidationHelper.Background" Value="Transparent" />
        <Setter Property="local:ValidationHelper.DisplayMode" Value="Text" />
        <Setter Property="local:ValidationHelper.FontSize" Value="10.0" />
        <Setter Property="local:RippleHelper.Background" Value="{DynamicResource Quan.Brushes.Primary}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style BasedOn="{StaticResource Quan.Styles.QuanTextBox.Default}" TargetType="{x:Type local:QuanTextBox}" />
  <Style x:Key="Quan.Styles.ToggleButton.ExpanderIcon" TargetType="{x:Type ToggleButton}">
    <Setter Property="FontFamily" Value="{StaticResource Quan.Fonts.FontAwesome}" />
    <Setter Property="FontSize" Value="{StaticResource Quan.FontSize.Bigger}" />
    <Setter Property="Foreground" Value="{DynamicResource Quan.Brushes.Border}" />
    <Setter Property="Height" Value="24" />
    <Setter Property="Width" Value="24" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Background="Transparent">
            <TextBlock x:Name="ExpandIcon" HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5 0.5" Text="{StaticResource Quan.FontIcons.Chevron-Down}">
              <TextBlock.LayoutTransform>
                <RotateTransform x:Name="ExpandIconRotateTransform" />
              </TextBlock.LayoutTransform>
            </TextBlock>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CheckStates">
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandIconRotateTransform" Storyboard.TargetProperty="Angle">
                      <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="180" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unchecked">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandIconRotateTransform" Storyboard.TargetProperty="Angle">
                      <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="ExpandIcon" Property="Foreground" Value="{DynamicResource Quan.Brushes.Primary}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="ExpandIcon" Property="Opacity" Value=".5" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Quan.Styles.ToggleButton.ExpanderHeader.Horizontal" TargetType="{x:Type ToggleButton}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Padding="{Binding Path=(local:ExpanderHelper.HorizontalHeaderPadding), RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}" Background="{TemplateBinding Background}">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="16" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <ContentPresenter Grid.Column="0" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
              <ToggleButton x:Name="ExpanderButton" Grid.Column="2" VerticalAlignment="Center" IsChecked="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" RenderTransformOrigin="0.5 0.5">
                <ToggleButton.Style>
                  <Style BasedOn="{StaticResource Quan.Styles.ToggleButton.ExpanderIcon}" TargetType="{x:Type ToggleButton}">
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding ExpandDirection, RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}" Value="Up">
                        <Setter Property="RenderTransform">
                          <Setter.Value>
                            <RotateTransform Angle="180" />
                          </Setter.Value>
                        </Setter>
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </ToggleButton.Style>
              </ToggleButton>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Quan.Styles.ToggleButton.ExpanderHeader.Vertical" TargetType="{x:Type ToggleButton}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Padding="{Binding Path=(local:ExpanderHelper.HorizontalHeaderPadding), RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}" Background="{TemplateBinding Background}">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="16" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <ToggleButton x:Name="ExpanderButton" Grid.Row="0" VerticalAlignment="Center" IsChecked="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" RenderTransformOrigin="0.5 0.5">
                <ToggleButton.Style>
                  <Style BasedOn="{StaticResource Quan.Styles.ToggleButton.ExpanderIcon}" TargetType="{x:Type ToggleButton}">
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding ExpandDirection, RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}" Value="Left">
                        <Setter Property="RenderTransform">
                          <Setter.Value>
                            <RotateTransform Angle="90" />
                          </Setter.Value>
                        </Setter>
                      </DataTrigger>
                      <DataTrigger Binding="{Binding ExpandDirection, RelativeSource={RelativeSource AncestorType=Expander, AncestorLevel=1}}" Value="Right">
                        <Setter Property="RenderTransform">
                          <Setter.Value>
                            <RotateTransform Angle="-90" />
                          </Setter.Value>
                        </Setter>
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </ToggleButton.Style>
              </ToggleButton>
              <ContentPresenter Grid.Row="2" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type local:QuanExpander}">
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{DynamicResource Quan.Brushes.Border}" />
    <Setter Property="Foreground" Value="{DynamicResource Quan.Brushes.ForegroundLight}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Top" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:QuanExpander}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <DockPanel>
              <ToggleButton Name="PART_HeaderSite" Background="{TemplateBinding local:ExpanderHelper.HeaderBackground}" BorderThickness="0" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Cursor="Hand" DockPanel.Dock="Top" Focusable="False" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsTabStop="False" Style="{StaticResource Quan.Styles.ToggleButton.ExpanderHeader.Horizontal}" TextElement.FontSize="{TemplateBinding local:ExpanderHelper.HeaderFontSize}" />
              <Border Name="PART_ContentSite">
                <Border.LayoutTransform>
                  <TransformGroup>
                    <ScaleTransform />
                    <RotateTransform />
                  </TransformGroup>
                </Border.LayoutTransform>
                <Grid Name="PART_ContentPanel" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                  <ContentPresenter Name="PART_Content" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Focusable="False" />
                </Grid>
              </Border>
            </DockPanel>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="ExpansionStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition To="Expanded">
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="PART_ContentPanel" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.25" />
                      <DoubleAnimation EasingFunction="{StaticResource Quan.EasingFuns.CubicInOut}" Storyboard.TargetName="PART_ContentSite" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" From="0" To="1" Duration="0:0:0.25" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition To="Collapsed">
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="PART_ContentPanel" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:0.20" />
                      <DoubleAnimation EasingFunction="{StaticResource Quan.EasingFuns.CubicInOut}" Storyboard.TargetName="PART_ContentSite" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" From="1" To="0" Duration="0:0:0.20" />
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Expanded">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PART_ContentPanel" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="PART_ContentSite" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Collapsed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PART_ContentPanel" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="PART_ContentSite" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" To="0" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="ExpandDirection" Value="Right">
              <Setter TargetName="PART_HeaderSite" Property="DockPanel.Dock" Value="Left" />
              <Setter TargetName="PART_HeaderSite" Property="Style" Value="{StaticResource Quan.Styles.ToggleButton.ExpanderHeader.Vertical}" />
              <Setter TargetName="PART_ContentSite" Property="LayoutTransform">
                <Setter.Value>
                  <TransformGroup>
                    <ScaleTransform />
                    <RotateTransform Angle="-90" />
                  </TransformGroup>
                </Setter.Value>
              </Setter>
              <Setter TargetName="PART_ContentPanel" Property="LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="90" />
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Left">
              <Setter TargetName="PART_HeaderSite" Property="DockPanel.Dock" Value="Right" />
              <Setter TargetName="PART_HeaderSite" Property="Style" Value="{StaticResource Quan.Styles.ToggleButton.ExpanderHeader.Vertical}" />
              <Setter TargetName="PART_ContentSite" Property="LayoutTransform">
                <Setter.Value>
                  <TransformGroup>
                    <ScaleTransform />
                    <RotateTransform Angle="90" />
                  </TransformGroup>
                </Setter.Value>
              </Setter>
              <Setter TargetName="PART_ContentPanel" Property="LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90" />
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Up">
              <Setter TargetName="PART_HeaderSite" Property="DockPanel.Dock" Value="Bottom" />
              <Setter TargetName="PART_HeaderSite" Property="Style" Value="{StaticResource Quan.Styles.ToggleButton.ExpanderHeader.Horizontal}" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Down">
              <Setter TargetName="PART_HeaderSite" Property="DockPanel.Dock" Value="Top" />
              <Setter TargetName="PART_HeaderSite" Property="Style" Value="{StaticResource Quan.Styles.ToggleButton.ExpanderHeader.Horizontal}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <WindowChrome x:Key="DefaultWindowChrome" CaptionHeight="{StaticResource TitleBarHeight}" CornerRadius="0" GlassFrameThickness="0,1,0,0" UseAeroCaptionButtons="False" />
  <ControlTemplate x:Key="Quan.Templates.QuanWindow.Default" TargetType="{x:Type local:QuanWindow}">
    <!--  Window border  -->
    <Border x:Name="MainBorder" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
      <!--  The window content  -->
      <Grid>
        <Grid.RowDefinitions>
          <!--  Title Bar  -->
          <RowDefinition Height="Auto" />
          <!--  Window Content  -->
          <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <!--  Title Bar  -->
        <Grid Grid.Row="0" Height="{StaticResource TitleBarHeight}">
          <Grid.ColumnDefinitions>
            <!--  Icon  -->
            <ColumnDefinition Width="Auto" />
            <!--  Title  -->
            <ColumnDefinition Width="*" />
            <!--  Windows Button  -->
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <!--  icon  -->
          <Image x:Name="PART_Icon" Width="22" Height="22" Margin="5,0" VerticalAlignment="Center" Focusable="False" Source="{TemplateBinding Icon}" Visibility="{Binding ShowIconOnTitleBar, RelativeSource={RelativeSource TemplatedParent}, Converter={local:BooleanToCollapsedConverter}}" WindowChrome.IsHitTestVisibleInChrome="True" />
          <!--  Title  -->
          <ContentControl x:Name="PART_Title" Grid.Column="1" VerticalContentAlignment="Center" Content="{TemplateBinding Title}" ContentTemplate="{TemplateBinding TitleTemplate}" Focusable="False" Style="{StaticResource Quan.Styles.ContentControl.Default}" />
          <StackPanel Grid.Column="2" Orientation="Horizontal" WindowChrome.IsHitTestVisibleInChrome="True">
            <Button x:Name="PART_MinButton" Width="46" Height="{StaticResource TitleBarHeight}" local:IconHelper.Geometry="{StaticResource WindowMinGeometry}" local:IconHelper.Height="10" local:IconHelper.Width="10" BorderThickness="1,0" Command="{x:Static SystemCommands.MinimizeWindowCommand}" Focusable="False" IsEnabled="{Binding IsMinButtonEnabled, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource Quan.Styles.Button.Icon}" />
            <Button x:Name="PART_MaxButton" Width="46" Height="{StaticResource TitleBarHeight}" local:IconHelper.Geometry="{StaticResource WindowMaxGeometry}" local:IconHelper.Height="10" local:IconHelper.Width="10" BorderThickness="1,0" Command="{x:Static SystemCommands.MaximizeWindowCommand}" Focusable="False" IsEnabled="{Binding IsMaxButtonEnabled, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource Quan.Styles.Button.Icon}" />
            <Button x:Name="PART_RestoreButton" Width="46" Height="{StaticResource TitleBarHeight}" local:IconHelper.Geometry="{StaticResource WindowRestoreGeometry}" local:IconHelper.Height="10" local:IconHelper.Width="10" BorderThickness="1,0" Command="{x:Static SystemCommands.RestoreWindowCommand}" Focusable="False" IsEnabled="{Binding IsMaxButtonEnabled, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource Quan.Styles.Button.Icon}" />
            <Button x:Name="PART_CloseButton" Width="46" Height="{StaticResource TitleBarHeight}" local:IconHelper.Geometry="{StaticResource CloseGeometry}" local:IconHelper.Height="10" local:IconHelper.Width="10" BorderThickness="1,0,0,0" Command="{x:Static SystemCommands.CloseWindowCommand}" Focusable="False" IsEnabled="{Binding IsCloseButtonEnabled, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource Quan.Styles.Button.Icon}" />
          </StackPanel>
        </Grid>
        <!--  Main Content  -->
        <Border x:Name="PART_MainContentBorder" Grid.Row="1" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderThickness="0">
          <AdornerDecorator>
            <ContentPresenter />
          </AdornerDecorator>
        </Border>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="WindowState" Value="Maximized">
        <Setter TargetName="PART_MaxButton" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_RestoreButton" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="WindowState" Value="Normal">
        <Setter TargetName="PART_MaxButton" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_RestoreButton" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger SourceName="PART_MinButton" Property="IsMouseOver" Value="True">
        <Setter TargetName="PART_MinButton" Property="Background" Value="{DynamicResource Quan.Brushes.IconHover}" />
      </Trigger>
      <Trigger SourceName="PART_MaxButton" Property="IsMouseOver" Value="True">
        <Setter TargetName="PART_MaxButton" Property="Background" Value="{DynamicResource Quan.Brushes.IconHover}" />
      </Trigger>
      <Trigger SourceName="PART_RestoreButton" Property="IsMouseOver" Value="True">
        <Setter TargetName="PART_RestoreButton" Property="Background" Value="{DynamicResource Quan.Brushes.IconHover}" />
      </Trigger>
      <Trigger SourceName="PART_CloseButton" Property="IsMouseOver" Value="True">
        <Setter TargetName="PART_CloseButton" Property="Background" Value="Red" />
        <Setter TargetName="PART_CloseButton" Property="Foreground" Value="{DynamicResource Quan.Brushes.IconForeground}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="Quan.Styles.QuanWindow.Default" TargetType="{x:Type local:QuanWindow}">
    <Setter Property="Background" Value="{DynamicResource Quan.Brushes.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource Quan.Brushes.WindowBorder}" />
    <Setter Property="FontFamily" Value="{StaticResource Quan.Fonts.Regular}" />
    <Setter Property="FontSize" Value="{StaticResource Quan.FontSize.Regular}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Foreground" Value="{DynamicResource Quan.Brushes.Foreground}" />
    <Setter Property="UseLayoutRounding" Value="True" />
    <Setter Property="Template" Value="{StaticResource Quan.Templates.QuanWindow.Default}" />
    <Setter Property="WindowChrome.WindowChrome" Value="{StaticResource DefaultWindowChrome}" />
    <Setter Property="TextElement.FontSize" Value="{StaticResource Quan.FontSize.Regular}" />
    <Setter Property="local:WindowHelper.FixMaximizedWindow" Value="True" />
    <Style.Triggers>
      <Trigger Property="WindowChrome.WindowChrome" Value="{x:Null}">
        <Setter Property="local:WindowHelper.FixMaximizedWindow" Value="False" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style BasedOn="{StaticResource Quan.Styles.QuanWindow.Default}" TargetType="{x:Type local:QuanWindow}" />
</ResourceDictionary>