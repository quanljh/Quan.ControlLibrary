<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="clr-namespace:Quan.ControlLibrary" xmlns:o="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" xmlns:system="clr-namespace:System;assembly=mscorlib">
  <SolidColorBrush x:Key="DataGrid.Border.Common" o:Freeze="True" Color="#bdbdbd" />
  <SolidColorBrush x:Key="DataGrid.Border.LightGray" o:Freeze="True" Color="#dddddd" />
  <SolidColorBrush x:Key="DataGrid.Border.DarkGray" o:Freeze="True" Color="#999999" />
  <SolidColorBrush x:Key="DataGrid.Background.Common" o:Freeze="True" Color="#4cc5e0" />
  <SolidColorBrush x:Key="DataGrid.Background.MouseOver" o:Freeze="True" Color="#93e0f5" />
  <SolidColorBrush x:Key="DataGridRow.Background.Selection" o:Freeze="True" Color="#85d7ed" />
  <SolidColorBrush x:Key="DataGrid.Border.MouseOver" o:Freeze="True" Color="#74d7f2" />
  <SolidColorBrush x:Key="DataGrid.Background.Pressed" o:Freeze="True" Color="#328fb8" />
  <SolidColorBrush x:Key="DataGrid.Border.Pressed" o:Freeze="True" Color="#328fb8" />
  <SolidColorBrush x:Key="DataGrid.Background.Disabled" o:Freeze="True" Color="#FFF4F4F4" />
  <FontFamily x:Key="JapaneseFont">Meiryo UI</FontFamily>
  <FontFamily x:Key="LatoRegular">pack://application:,,,/Quan.ControlLibrary;Component/Resources/Fonts/#Lato Regular</FontFamily>
  <FontFamily x:Key="LatoThin">pack://application:,,,/Quan.ControlLibrary;Component/Resources/Fonts/#Lato Thin</FontFamily>
  <FontFamily x:Key="LatoBold">pack://application:,,,/Quan.ControlLibrary;Component/Resources/Fonts/#Lato Bold</FontFamily>
  <FontFamily x:Key="FontAwesome">pack://application:,,,/Quan.ControlLibrary;Component/Resources/Fonts/#FontAwesome</FontFamily>
  <system:Double x:Key="FontSizeVeryVerySmall">6</system:Double>
  <system:Double x:Key="FontSizeVerySmall">8</system:Double>
  <system:Double x:Key="FontSizeSmaller">10</system:Double>
  <system:Double x:Key="FontSizeSmall">12</system:Double>
  <system:Double x:Key="FontSizeRegular">14</system:Double>
  <system:Double x:Key="FontSizeBigger">16</system:Double>
  <system:Double x:Key="FontSizeLarge">20</system:Double>
  <system:Double x:Key="FontSizeXLarge">24</system:Double>
  <system:Double x:Key="FontSizeXXLarge">30</system:Double>
  <system:String x:Key="FontAweSomeChatIcon"><![CDATA[ &#xf086; ]]></system:String>
  <system:String x:Key="FontAweSomeUserIcon"><![CDATA[ &#xf007; ]]></system:String>
  <system:String x:Key="FontAweSomePictureIcon"><![CDATA[ &#xf1c5;]]></system:String>
  <system:String x:Key="FontAweSomeCogIcon"><![CDATA[ &#xf013;]]></system:String>
  <system:String x:Key="FontAweSomeSearchIcon"><![CDATA[ &#xf002;]]></system:String>
  <system:String x:Key="FontAwesomeEllipsisIcon"><![CDATA[ &#xf141;]]></system:String>
  <system:String x:Key="FontAweSomeEllipsisVerticalIcon"><![CDATA[ &#xf142;]]></system:String>
  <system:String x:Key="FontAweSomePaperclipIcon"><![CDATA[ &#xf0c6;]]></system:String>
  <system:String x:Key="FontAweSomeEmojiIcon"><![CDATA[ &#xf118;]]></system:String>
  <system:String x:Key="FontAweSomeArrowleftIcon"><![CDATA[ &#xf060;]]></system:String>
  <system:String x:Key="FontAwesomeTickIcon"><![CDATA[ &#xf00c;]]></system:String>
  <system:String x:Key="FontAwesomeCloseIcon"><![CDATA[ &#xf00d;]]></system:String>
  <system:String x:Key="FontAwesomeAngleUpIcon"><![CDATA[ &#xf106;]]></system:String>
  <system:String x:Key="FontAwesomeAngleDownIcon"><![CDATA[ &#xf107;]]></system:String>
  <system:String x:Key="FontAwesomePlusIcon"><![CDATA[ &#xf067;]]></system:String>
  <system:String x:Key="FontAwesomeMinusIcon"><![CDATA[ &#xf068;]]></system:String>
  <Geometry x:Key="CloseGeometry" o:Freeze="True">M0.7,0 L5,4.3 L9.3,0 L10,0.7 L5.7,5 L10,9.3 L9.3,10 L5,5.7 L0.7,10 L0,9.3 L4.3,5 L0,0.7 z</Geometry>
  <Geometry x:Key="WindowMinGeometry" o:Freeze="True">M0,4 L10,4 L10,5 L0,5 z</Geometry>
  <Geometry x:Key="WindowRestoreGeometry" o:Freeze="True">M1,3 L1,9 L7,9 L7,3 z M3,1 L3,2 L8,2 L8,7 L9,7 L9,1 z M2,0 L10,0 L10,8 L8,8 L8,10 L0,10 L0,2 L2,2 z</Geometry>
  <Geometry x:Key="WindowMaxGeometry" o:Freeze="True">M1,1 L1,9 L9,9 L9,1 z M0,0 L10,0 L10,10 L0,10 z</Geometry>
  <Style x:Key="Quan.Styles.ContentControl.Default" TargetType="{x:Type ContentControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContentControl}">
          <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="Quan.Brushes.BackgroundBrush" o:Freeze="True" Color="{DynamicResource Quan.Colors.Background}" />
  <SolidColorBrush x:Key="Quan.Brushes.BackgroundLightBrush" o:Freeze="True" Color="{DynamicResource Quan.Colors.BackgroundLight}" />
  <SolidColorBrush x:Key="Quan.Brushes.BorderBrush" o:Freeze="True" Color="{DynamicResource Quan.Colors.BorderBrush}" />
  <SolidColorBrush x:Key="Quan.Brushes.ForegroundBrush" o:Freeze="True" Color="{DynamicResource Quan.Colors.Foreground}" />
  <SolidColorBrush x:Key="Quan.Brushes.ForegroundLightBrush" o:Freeze="True" Color="{DynamicResource Quan.Colors.ForegroundLight}" />
  <SolidColorBrush x:Key="Quan.Brushes.ForegroundVeryLightBrush" o:Freeze="True" Color="{DynamicResource Quan.Colors.ForegroundVeryLight}" />
  <SolidColorBrush x:Key="Quan.Brushes.IconHoverBrush" o:Freeze="True" Color="{DynamicResource Quan.Colors.IconHover}" />
  <SolidColorBrush x:Key="Quan.Brushes.IconForegroundBrush" o:Freeze="True" Color="{DynamicResource Quan.Colors.IconForeground}" />
  <SolidColorBrush x:Key="Quan.Brushes.PrimaryColorBrush" o:Freeze="True" Color="{DynamicResource Quan.Colors.PrimaryColor}" />
  <SolidColorBrush x:Key="Quan.Brushes.LightPrimaryColorBrush" o:Freeze="True" Color="{DynamicResource Quan.Colors.LightPrimaryColor}" />
  <SolidColorBrush x:Key="Quan.Brushes.VeryLightPrimaryColorBrush" o:Freeze="True" Color="{DynamicResource Quan.Colors.VeryLightPrimaryColor}" />
  <SolidColorBrush x:Key="Quan.Brushes.DarkPrimaryColorBrush" o:Freeze="True" Color="{DynamicResource Quan.Colors.DarkPrimaryColor}" />
  <SolidColorBrush x:Key="Quan.Brushes.WarningColorBrush" o:Freeze="True" Color="{DynamicResource Quan.Colors.WarningColor}" />
  <SolidColorBrush x:Key="Quan.Brushes.ErrorColorBrush" o:Freeze="True" Color="{DynamicResource Quan.Colors.ErrorColorColor}" />
  <SolidColorBrush x:Key="Quan.Brushes.SuccessColorBrush" o:Freeze="True" Color="{DynamicResource Quan.Colors.SuccessColor}" />
  <SolidColorBrush x:Key="Quan.Brushes.FocusColorBrush" o:Freeze="True" Color="{DynamicResource Quan.Colors.FocusColor}" />
  <Style x:Key="Quan.Styles.Common.FocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="1" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeDashArray="1 2" StrokeThickness="1" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Quan.Styles.Common.BaseStyle" TargetType="Control">
    <Setter Property="Foreground" Value="{DynamicResource Quan.Colors.ForegroundBrush}" />
    <Setter Property="FontSize" Value="{StaticResource FontSizeRegular}" />
    <Setter Property="FocusVisualStyle" Value="{StaticResource Quan.Styles.Common.FocusVisual}" />
  </Style>
  <Style x:Key="Quan.Styles.Button.BaseBase" BasedOn="{StaticResource Quan.Styles.Common.BaseStyle}" TargetType="ButtonBase">
    <Setter Property="Height" Value="30" />
    <Setter Property="BorderBrush" Value="{DynamicResource Quan.Brushes.BorderBrush}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
  </Style>
  <Style x:Key="Quan.Styles.Button.Base" BasedOn="{StaticResource Quan.Styles.Button.BaseBase}" TargetType="Button">
    <Setter Property="Background" Value="{DynamicResource Quan.Brushes.BackgroundBrush}" />
    <Setter Property="local:BorderElement.CornerRadius" Value="5" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(local:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <StackPanel Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Orientation="Horizontal">
              <Path x:Name="IconContent" Width="{TemplateBinding local:IconElement.Width}" Height="{TemplateBinding local:IconElement.Height}" Data="{TemplateBinding local:IconElement.Geometry}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" />
              <ContentPresenter x:Name="ContentPresenter" Margin="6,0,0,0" VerticalAlignment="Center" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </StackPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Content" Value="{x:Null}">
              <Setter TargetName="ContentPresenter" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="local:IconElement.Geometry" Value="{x:Null}">
              <Setter TargetName="IconContent" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="ContentPresenter" Property="Margin" Value="0" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Opacity" Value="0.9" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Opacity" Value="0.6" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="0.4" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Quan.Styles.Button.Icon" BasedOn="{StaticResource Quan.Styles.Button.Base}" TargetType="Button">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="local:BorderElement.CornerRadius" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(local:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <ContentControl Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
              <Path Width="{TemplateBinding local:IconElement.Width}" Height="{TemplateBinding local:IconElement.Height}" Data="{TemplateBinding local:IconElement.Geometry}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" />
            </ContentControl>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type PasswordBox}">
    <Setter Property="FontFamily" Value="{StaticResource LatoRegular}" />
    <Setter Property="FontSize" Value="{StaticResource FontSizeXXLarge}" />
    <Setter Property="Padding" Value="10" />
    <Setter Property="Margin" Value="0,5" />
    <Setter Property="BorderBrush" Value="{DynamicResource Quan.Brushes.BorderBrush}" />
    <Setter Property="BorderThickness" Value="0,0,0,1" />
    <Setter Property="local:MonitorPasswordProperty.Value" Value="True" />
    <Setter Property="Background" Value="{DynamicResource Quan.Brushes.BackgroundBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type PasswordBox}">
          <Grid>
            <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
              <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
            </Border>
            <TextBlock x:Name="placeholder" Padding="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="Center" FontFamily="{StaticResource LatoThin}" FontSize="{TemplateBinding FontSize}" IsHitTestVisible="False" Text="{TemplateBinding Tag}" Visibility="{TemplateBinding local:HasTextProperty.Value,&#xD;&#xA;                                                         Converter={local:BooleanToHiddenConverter}}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="border" Property="Opacity" Value="0.56" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Quan.Brushes.PrimaryColorBrush}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
              <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Quan.Brushes.FocusColorBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="QuanTextBox.ValidationTemplate">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto" />
        <RowDefinition Height="*" />
      </Grid.RowDefinitions>
      <AdornedElementPlaceholder x:Name="Placeholder" />
      <Grid Grid.Row="1">
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto" />
          <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Border Grid.Row="1" Margin="0,-1,0,0" Padding="5" Background="White" BorderBrush="{DynamicResource Quan.Brushes.BorderBrush}" BorderThickness="1" CornerRadius="5">
          <TextBlock Foreground="Red" Text="{Binding ElementName=Placeholder, Path=AdornedElement.(Validation.Errors)/ErrorContent}" />
        </Border>
        <Path Grid.Row="0" HorizontalAlignment="Center" Data="M 0 10 L 5 0 10 10 " Fill="White" Stroke="{DynamicResource Quan.Brushes.BorderBrush}" StrokeThickness="1" />
      </Grid>
    </Grid>
  </ControlTemplate>
  <Style x:Key="QuanTextBox.Default.Style" TargetType="{x:Type local:QuanTextBox}">
    <Setter Property="FontFamily" Value="{StaticResource JapaneseFont}" />
    <Setter Property="FontSize" Value="{StaticResource FontSizeRegular}" />
    <Setter Property="BorderBrush" Value="{DynamicResource Quan.Brushes.BorderBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Background" Value="{DynamicResource Quan.Brushes.BackgroundBrush}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="3,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:QuanTextBox}">
          <Grid>
            <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1" SnapsToDevicePixels="True">
              <ScrollViewer x:Name="PART_ContentHost" Margin="0" Padding="{TemplateBinding Padding}" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
            </Border>
            <TextBlock x:Name="PART_GuideMessage" Margin="9,0,0,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FontFamily="{TemplateBinding FontFamily}" Foreground="{TemplateBinding Foreground}" IsHitTestVisible="False" Text="{TemplateBinding GuideText}" Visibility="{Binding Text, RelativeSource={RelativeSource TemplatedParent}, Converter={local:StringToVisibilityConverter}}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="border" Property="Opacity" Value="0.56" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Quan.Brushes.PrimaryColorBrush}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
              <Setter TargetName="border" Property="BorderThickness" Value="2" />
              <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Quan.Brushes.PrimaryColorBrush}" />
              <Setter TargetName="border" Property="Background" Value="{DynamicResource Quan.Brushes.FocusColorBrush}" />
            </Trigger>
            <Trigger Property="Validation.HasError" Value="true">
              <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Quan.Brushes.ErrorColorBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Validation.ErrorTemplate" Value="{StaticResource QuanTextBox.ValidationTemplate}" />
  </Style>
  <Style BasedOn="{StaticResource QuanTextBox.Default.Style}" TargetType="{x:Type local:QuanTextBox}" />
  <ControlTemplate x:Key="Quan.Templates.Window.Default" TargetType="{x:Type local:QuanWindow}">
    <!--  Outer border with the drop shadow margin  -->
    <Border x:Name="PART_OuterBorder" Padding="5" BorderBrush="{TemplateBinding BorderBrush}">
      <!--  Main window outline  -->
      <Grid>
        <!--  Outer dragging border  -->
        <Border x:Name="PART_OuterDraggingBorder" Panel.ZIndex="2" BorderBrush="{DynamicResource Quan.Brushes.WarningColorBrush}" CornerRadius="{TemplateBinding WindowCornerRadius}" />
        <!--  Opacity mask for corners on grid  -->
        <Border x:Name="PART_OpacityMask" Background="{DynamicResource Quan.Brushes.BackgroundBrush}" CornerRadius="{TemplateBinding WindowCornerRadius}" />
        <!--  Window border and drop shadow  -->
        <Border x:Name="RadiusBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding WindowCornerRadius}">
          <Border.Effect>
            <DropShadowEffect Opacity="0.5" ShadowDepth="2.5" />
          </Border.Effect>
        </Border>
        <!--  The main window content  -->
        <Grid>
          <Grid.RowDefinitions>
            <!--  Title Bar  -->
            <RowDefinition Height="Auto" />
            <!--  Window Content  -->
            <RowDefinition Height="*" />
          </Grid.RowDefinitions>
          <!--  Dividing Line  -->
          <Border Grid.Row="0" BorderBrush="{DynamicResource Quan.Brushes.ForegroundVeryLightBrush}" BorderThickness="0,0,0,0.5" ClipToBounds="True">
            <Border.Effect>
              <DropShadowEffect Direction="270" Opacity="0.5" ShadowDepth="0.5" />
            </Border.Effect>
          </Border>
          <!--  Title Bar  -->
          <Grid Grid.Row="0">
            <Grid.ColumnDefinitions>
              <!--  Icon  -->
              <ColumnDefinition Width="Auto" />
              <!--  Title  -->
              <ColumnDefinition Width="*" />
              <!--  Windows Button  -->
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <!--  icon  -->
            <Image x:Name="PART_Icon" Width="22" Height="22" Margin="5,0,0,0" VerticalAlignment="Center" Focusable="False" IsHitTestVisible="False" Source="{TemplateBinding Icon}" Visibility="{Binding ShowIconOnTitleBar, RelativeSource={RelativeSource TemplatedParent}, Converter={local:BooleanToCollapsedConverter}}" />
            <!--  Title  -->
            <ContentControl x:Name="PART_TitleBar" Grid.Column="1" Height="{Binding TitleBarHeight, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" VerticalContentAlignment="Center" Content="{TemplateBinding Title}" ContentTemplate="{TemplateBinding TitleTemplate}" Focusable="False" Style="{StaticResource Quan.Styles.ContentControl.Default}" />
            <StackPanel Grid.Column="2" Orientation="Horizontal" WindowChrome.IsHitTestVisibleInChrome="True">
              <Button x:Name="PART_MinButton" Width="45" Height="{Binding TitleBarHeight, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" local:IconElement.Geometry="{StaticResource WindowMinGeometry}" local:IconElement.Height="10" local:IconElement.Width="10" BorderThickness="1,0" Command="{x:Static SystemCommands.MinimizeWindowCommand}" Focusable="False" IsEnabled="{Binding IsMinButtonEnabled, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource Quan.Styles.Button.Icon}" />
              <Button x:Name="PART_MaxButton" Width="45" Height="{Binding TitleBarHeight, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" local:IconElement.Geometry="{StaticResource WindowMaxGeometry}" local:IconElement.Height="10" local:IconElement.Width="10" BorderThickness="1,0" Command="{x:Static SystemCommands.MaximizeWindowCommand}" Focusable="False" IsEnabled="{Binding IsMaxButtonEnabled, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource Quan.Styles.Button.Icon}" />
              <Button x:Name="PART_RestoreButton" Width="45" Height="{Binding TitleBarHeight, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" local:IconElement.Geometry="{StaticResource WindowRestoreGeometry}" local:IconElement.Height="10" local:IconElement.Width="10" BorderThickness="1,0" Command="{x:Static SystemCommands.RestoreWindowCommand}" Focusable="False" IsEnabled="{Binding IsMaxButtonEnabled, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource Quan.Styles.Button.Icon}" />
              <Button x:Name="PART_CloseButton" Width="45" Height="{Binding TitleBarHeight, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" local:IconElement.Geometry="{StaticResource CloseGeometry}" local:IconElement.Height="10" local:IconElement.Width="10" BorderThickness="1,0,0,0" Command="{x:Static SystemCommands.CloseWindowCommand}" Focusable="False" IsEnabled="{Binding IsCloseButtonEnabled, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource Quan.Styles.Button.Icon}" />
            </StackPanel>
          </Grid>
          <!--  Page Content  -->
          <Border Grid.Row="1" Padding="{TemplateBinding Padding}" ClipToBounds="True">
            <AdornerDecorator>
              <ContentPresenter />
            </AdornerDecorator>
          </Border>
          <!--  Corner clipping  -->
          <Grid.OpacityMask>
            <VisualBrush Visual="{Binding ElementName=PART_OpacityMask}" />
          </Grid.OpacityMask>
        </Grid>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="WindowState" Value="Maximized">
        <Setter TargetName="PART_MaxButton" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_RestoreButton" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="WindowState" Value="Normal">
        <Setter TargetName="PART_MaxButton" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_RestoreButton" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger SourceName="PART_MinButton" Property="IsMouseOver" Value="True">
        <Setter TargetName="PART_MinButton" Property="Background" Value="{DynamicResource Quan.Brushes.IconHoverBrush}" />
      </Trigger>
      <Trigger SourceName="PART_MaxButton" Property="IsMouseOver" Value="True">
        <Setter TargetName="PART_MaxButton" Property="Background" Value="{DynamicResource Quan.Brushes.IconHoverBrush}" />
      </Trigger>
      <Trigger SourceName="PART_RestoreButton" Property="IsMouseOver" Value="True">
        <Setter TargetName="PART_RestoreButton" Property="Background" Value="{DynamicResource Quan.Brushes.IconHoverBrush}" />
      </Trigger>
      <Trigger SourceName="PART_CloseButton" Property="IsMouseOver" Value="True">
        <Setter TargetName="PART_CloseButton" Property="Background" Value="Red" />
        <Setter TargetName="PART_CloseButton" Property="Foreground" Value="{DynamicResource Quan.Brushes.IconForegroundBrush}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="Quan.Styles.Window.Default" TargetType="{x:Type local:QuanWindow}">
    <Setter Property="Background" Value="{DynamicResource Quan.Brushes.BackgroundBrush}" />
    <Setter Property="BorderBrush" Value="{DynamicResource Quan.Brushes.BorderBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Foreground" Value="{DynamicResource Quan.Brushes.ForegroundBrush}" />
    <Setter Property="AllowsTransparency" Value="True" />
    <Setter Property="WindowStyle" Value="None" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template" Value="{StaticResource Quan.Templates.Window.Default}" />
    <Setter Property="TextElement.FontSize" Value="{StaticResource FontSizeRegular}" />
  </Style>
  <Style BasedOn="{StaticResource Quan.Styles.Window.Default}" TargetType="{x:Type local:QuanWindow}" />
</ResourceDictionary>