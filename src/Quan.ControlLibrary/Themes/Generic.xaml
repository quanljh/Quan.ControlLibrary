<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:system="clr-namespace:System;assembly=mscorlib" xmlns:local="clr-namespace:Quan.ControlLibrary" xmlns:o="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options">
  <FontFamily x:Key="Quan.Fonts.Regular">pack://application:,,,/Quan.ControlLibrary;component/Resources/Fonts/#Noto Sans</FontFamily>
  <FontFamily x:Key="Quan.Fonts.FontAwesome">pack://application:,,,/Quan.ControlLibrary;component/Resources/Fonts/#FontAwesome</FontFamily>
  <system:Double x:Key="Quan.FontSize.VeryVerySmall">6</system:Double>
  <system:Double x:Key="Quan.FontSize.VerySmall">8</system:Double>
  <system:Double x:Key="Quan.FontSize.Smaller">10</system:Double>
  <system:Double x:Key="Quan.FontSize.Small">12</system:Double>
  <system:Double x:Key="Quan.FontSize.Regular">14</system:Double>
  <system:Double x:Key="Quan.FontSize.Bigger">16</system:Double>
  <system:Double x:Key="Quan.FontSize.Large">20</system:Double>
  <system:Double x:Key="Quan.FontSize.XLarge">24</system:Double>
  <system:Double x:Key="Quan.FontSize.XXLarge">30</system:Double>
  <system:String x:Key="Quan.FontIcons.Close">ÔÄç</system:String>
  <Geometry x:Key="CloseGeometry" o:Freeze="True">M0.7,0 L5,4.3 L9.3,0 L10,0.7 L5.7,5 L10,9.3 L9.3,10 L5,5.7 L0.7,10 L0,9.3 L4.3,5 L0,0.7 z</Geometry>
  <Geometry x:Key="WindowMinGeometry" o:Freeze="True">M0,4 L10,4 L10,5 L0,5 z</Geometry>
  <Geometry x:Key="WindowRestoreGeometry" o:Freeze="True">M1,3 L1,9 L7,9 L7,3 z M3,1 L3,2 L8,2 L8,7 L9,7 L9,1 z M2,0 L10,0 L10,8 L8,8 L8,10 L0,10 L0,2 L2,2 z</Geometry>
  <Geometry x:Key="WindowMaxGeometry" o:Freeze="True">M1,1 L1,9 L9,9 L9,1 z M0,0 L10,0 L10,10 L0,10 z</Geometry>
  <Storyboard x:Key="Quan.Storyboard.GotFocus" o:Freeze="True">
    <DoubleAnimation Storyboard.TargetName="PART_GuideMessage" />
  </Storyboard>
  <Style x:Key="Quan.Styles.ContentControl.Default" TargetType="{x:Type ContentControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContentControl}">
          <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Storyboard x:Key="Quan.Storyboards.TextBox.GotFocus" o:Freeze="True">
    <DoubleAnimation Storyboard.TargetName="PART_GuideMessage" Storyboard.TargetProperty="Opacity" To="0.2" Duration="0:0:0.2" />
  </Storyboard>
  <Storyboard x:Key="Quan.Storyboards.TextBox.LostFocus" o:Freeze="True">
    <DoubleAnimation Storyboard.TargetName="PART_GuideMessage" Storyboard.TargetProperty="Opacity" Duration="0:0:0.2" />
  </Storyboard>
  <system:Double x:Key="TitleBarHeight">32</system:Double>
  <SolidColorBrush x:Key="Quan.Brushes.Background" o:Freeze="True" Color="{DynamicResource Quan.Colors.Background}" />
  <SolidColorBrush x:Key="Quan.Brushes.BackgroundLight" o:Freeze="True" Color="{DynamicResource Quan.Colors.BackgroundLight}" />
  <SolidColorBrush x:Key="Quan.Brushes.Border" o:Freeze="True" Color="{DynamicResource Quan.Colors.BorderBrush}" />
  <SolidColorBrush x:Key="Quan.Brushes.Foreground" o:Freeze="True" Color="{DynamicResource Quan.Colors.Foreground}" />
  <SolidColorBrush x:Key="Quan.Brushes.ForegroundLight" o:Freeze="True" Color="{DynamicResource Quan.Colors.ForegroundLight}" />
  <SolidColorBrush x:Key="Quan.Brushes.ForegroundHighLight" o:Freeze="True" Color="{DynamicResource Quan.Colors.ForegroundHighLight}" />
  <SolidColorBrush x:Key="Quan.Brushes.IconHover" o:Freeze="True" Color="{DynamicResource Quan.Colors.IconHover}" />
  <SolidColorBrush x:Key="Quan.Brushes.IconForeground" o:Freeze="True" Color="{DynamicResource Quan.Colors.IconForeground}" />
  <SolidColorBrush x:Key="Quan.Brushes.Primary" o:Freeze="True" Color="{DynamicResource Quan.Colors.Primary}" />
  <SolidColorBrush x:Key="Quan.Brushes.LightPrimary" o:Freeze="True" Color="{DynamicResource Quan.Colors.LightPrimary}" />
  <SolidColorBrush x:Key="Quan.Brushes.VeryLightPrimary" o:Freeze="True" Color="{DynamicResource Quan.Colors.VeryLightPrimary}" />
  <SolidColorBrush x:Key="Quan.Brushes.DarkPrimary" o:Freeze="True" Color="{DynamicResource Quan.Colors.DarkPrimary}" />
  <SolidColorBrush x:Key="Quan.Brushes.Warning" o:Freeze="True" Color="{DynamicResource Quan.Colors.Warning}" />
  <SolidColorBrush x:Key="Quan.Brushes.Error" o:Freeze="True" Color="{DynamicResource Quan.Colors.Error}" />
  <SolidColorBrush x:Key="Quan.Brushes.Success" o:Freeze="True" Color="{DynamicResource Quan.Colors.Success}" />
  <SolidColorBrush x:Key="Quan.Brushes.Focus" o:Freeze="True" Color="{DynamicResource Quan.Colors.Focus}" />
  <SolidColorBrush x:Key="Quan.Brushes.Disabled" o:Freeze="True" Color="{DynamicResource Quan.Colors.Disabled}" />
  <SolidColorBrush x:Key="Quan.Brushes.Gray1" o:Freeze="True" Color="{DynamicResource Quan.Colors.Gray1}" />
  <SolidColorBrush x:Key="Quan.Brushes.Gray2" o:Freeze="True" Color="{DynamicResource Quan.Colors.Gray2}" />
  <SolidColorBrush x:Key="Quan.Brushes.Gray3" o:Freeze="True" Color="{DynamicResource Quan.Colors.Gray3}" />
  <SolidColorBrush x:Key="Quan.Brushes.Gray4" o:Freeze="True" Color="{DynamicResource Quan.Colors.Gray4}" />
  <SolidColorBrush x:Key="Quan.Brushes.Gray5" o:Freeze="True" Color="{DynamicResource Quan.Colors.Gray5}" />
  <SolidColorBrush x:Key="Quan.Brushes.Gray6" o:Freeze="True" Color="{DynamicResource Quan.Colors.Gray6}" />
  <SolidColorBrush x:Key="Quan.Brushes.Gray7" o:Freeze="True" Color="{DynamicResource Quan.Colors.Gray7}" />
  <SolidColorBrush x:Key="Quan.Brushes.Gray8" o:Freeze="True" Color="{DynamicResource Quan.Colors.Gray8}" />
  <SolidColorBrush x:Key="Quan.Brushes.Gray9" o:Freeze="True" Color="{DynamicResource Quan.Colors.Gray9}" />
  <SolidColorBrush x:Key="Quan.Brushes.Gray10" o:Freeze="True" Color="{DynamicResource Quan.Colors.Gray10}" />
  <SolidColorBrush x:Key="Quan.Brushes.WindowBorder" o:Freeze="True" Color="{DynamicResource Quan.Colors.WindowBorder}" />
  <Style x:Key="Quan.Styles.Common.FocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="1" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeDashArray="1 2" StrokeThickness="1" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Quan.Styles.Common.BaseStyle" TargetType="Control">
    <Setter Property="Foreground" Value="{DynamicResource Quan.Brushes.Foreground}" />
    <Setter Property="FontFamily" Value="{StaticResource Quan.Fonts.Regular}" />
    <Setter Property="FontSize" Value="{StaticResource Quan.FontSize.Regular}" />
    <Setter Property="FocusVisualStyle" Value="{StaticResource Quan.Styles.Common.FocusVisual}" />
  </Style>
  <Style x:Key="Quan.Styles.Button.BaseBase" BasedOn="{StaticResource Quan.Styles.Common.BaseStyle}" TargetType="{x:Type ButtonBase}">
    <Setter Property="Height" Value="30" />
    <Setter Property="BorderBrush" Value="{DynamicResource Quan.Brushes.Border}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
  </Style>
  <Style x:Key="Quan.Styles.Button.Base" BasedOn="{StaticResource Quan.Styles.Button.BaseBase}" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="{DynamicResource Quan.Brushes.Background}" />
    <Setter Property="local:BorderHelper.CornerRadius" Value="5" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(local:BorderHelper.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <StackPanel Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Orientation="Horizontal">
              <Path x:Name="IconContent" Width="{TemplateBinding local:IconHelper.Width}" Height="{TemplateBinding local:IconHelper.Height}" Data="{TemplateBinding local:IconHelper.Geometry}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" />
              <ContentPresenter x:Name="ContentPresenter" Margin="6,0,0,0" VerticalAlignment="Center" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </StackPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Content" Value="{x:Null}">
              <Setter TargetName="ContentPresenter" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="local:IconHelper.Geometry" Value="{x:Null}">
              <Setter TargetName="IconContent" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="ContentPresenter" Property="Margin" Value="0" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Opacity" Value="0.9" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Opacity" Value="0.6" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="0.4" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Quan.Styles.Button.Icon" BasedOn="{StaticResource Quan.Styles.Button.Base}" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="local:BorderHelper.CornerRadius" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(local:BorderHelper.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <ContentControl Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
              <Path Width="{TemplateBinding local:IconHelper.Width}" Height="{TemplateBinding local:IconHelper.Height}" Data="{TemplateBinding local:IconHelper.Geometry}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" />
            </ContentControl>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="Quan.Templates.Button.FontIcon" TargetType="{x:Type Button}">
    <Grid Background="{TemplateBinding Background}">
      <ContentPresenter x:Name="PART_ContentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Opacity="0.75" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="PART_ContentPresenter" Property="Opacity" Value="1" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="False">
        <Setter TargetName="PART_ContentPresenter" Property="Opacity" Value=".5" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource Quan.Brushes.Disabled}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="Quan.Styles.Button.FontIcon" TargetType="{x:Type Button}">
    <Setter Property="FontFamily" Value="{StaticResource Quan.Fonts.FontAwesome}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="FontSize" Value="{StaticResource Quan.FontSize.Large}" />
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template" Value="{StaticResource Quan.Templates.Button.FontIcon}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
  </Style>
  <Style TargetType="{x:Type PasswordBox}">
    <Setter Property="FontFamily" Value="{StaticResource Quan.Fonts.Regular}" />
    <Setter Property="FontSize" Value="{StaticResource Quan.FontSize.Regular}" />
    <Setter Property="Padding" Value="10" />
    <Setter Property="Margin" Value="0,5" />
    <Setter Property="BorderBrush" Value="{DynamicResource Quan.Brushes.BorderBrush}" />
    <Setter Property="BorderThickness" Value="0,0,0,1" />
    <Setter Property="local:MonitorPasswordProperty.Value" Value="True" />
    <Setter Property="Background" Value="{DynamicResource Quan.Brushes.BackgroundBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type PasswordBox}">
          <Grid>
            <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
              <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
            </Border>
            <TextBlock x:Name="placeholder" Padding="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="Center" FontFamily="{StaticResource LatoThin}" FontSize="{TemplateBinding FontSize}" IsHitTestVisible="False" Text="{TemplateBinding Tag}" Visibility="{TemplateBinding local:HasTextProperty.Value,&#xD;&#xA;                                                         Converter={local:BooleanToHiddenConverter}}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="border" Property="Opacity" Value="0.56" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Quan.Brushes.PrimaryColorBrush}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
              <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Quan.Brushes.FocusColorBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="QuanTextBox.ValidationTemplate">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto" />
        <RowDefinition Height="*" />
      </Grid.RowDefinitions>
      <AdornedElementPlaceholder x:Name="Placeholder" />
      <Grid Grid.Row="1">
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto" />
          <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Border Grid.Row="1" Margin="0,-1,0,0" Padding="5" Background="{DynamicResource Quan.Brushes.Error}" CornerRadius="5">
          <TextBlock Foreground="{DynamicResource Quan.Brushes.ForegroundHighLight}" Text="{Binding ElementName=Placeholder, Path=AdornedElement.(Validation.Errors)/ErrorContent}" />
        </Border>
        <Path Grid.Row="0" HorizontalAlignment="Center" Data="M 0 10 L 5 0 10 10 " Fill="{DynamicResource Quan.Brushes.Error}" StrokeThickness="1" />
      </Grid>
    </Grid>
  </ControlTemplate>
  <ControlTemplate x:Key="Quan.Templates.QuanTextBox.Default" TargetType="{x:Type local:QuanTextBox}">
    <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
      <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding local:BorderHelper.CornerRadius}" />
      <Grid Margin="{TemplateBinding BorderThickness}">
        <Grid.RowDefinitions>
          <!--  Floating Guide Message  -->
          <RowDefinition Height="Auto" />
          <!--  Text Content  -->
          <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="Auto" />
          <!--<ColumnDefinition Width="Auto" />-->
        </Grid.ColumnDefinitions>
        <ScrollViewer x:Name="PART_ContentHost" Grid.Row="1" Margin="0" Padding="{TemplateBinding Padding}" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
        <TextBlock x:Name="PART_GuideMessage" Grid.Row="1" Grid.Column="0" Margin="5,0,0,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FontFamily="{TemplateBinding FontFamily}" Foreground="{DynamicResource Quan.Brushes.ForegroundLight}" IsHitTestVisible="False" Text="{TemplateBinding local:TextBoxHelper.GuideText}" Visibility="{Binding Text, RelativeSource={RelativeSource TemplatedParent}, Converter={local:StringToVisibilityConverter}}" />
        <Button x:Name="PART_ClearTextButton" Grid.Row="1" Grid.Column="1" Width="26" local:TextBoxHelper.IsUseClearButton="{Binding Path=(local:TextBoxHelper.IsShowClearButton), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" Content="{StaticResource Quan.FontIcons.Close}" Focusable="False" IsTabStop="False" Style="{StaticResource Quan.Styles.Button.FontIcon}" Visibility="{Binding Path=(local:TextBoxHelper.IsShowClearButton), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay, Converter={local:BooleanToCollapsedConverter}}" />
        <!--<Line
                    Grid.Row="1"
                    Grid.Column="2"
                    Stroke="{DynamicResource Quan.Brushes.BorderBrush}"
                    X1="0"
                    X2="0"
                    Y1="3"
                    Y2="23" />

                <Button
                    x:Name="PART_FunctionButton"
                    Grid.Row="1"
                    Grid.Column="2"
                    Width="26"
                    local:IconHelper.Geometry="{TemplateBinding local:TextBoxHelper.ButtonContent}"
                    local:IconHelper.Height="10"
                    local:IconHelper.Width="10"
                    BorderThickness="1,0"
                    Focusable="False"
                    Style="{StaticResource Quan.Styles.Button.Icon}" />-->
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="border" Property="Opacity" Value="0.56" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Quan.Brushes.LightPrimary}" />
      </Trigger>
      <Trigger Property="IsKeyboardFocused" Value="True">
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Quan.Brushes.Primary}" />
      </Trigger>
      <Trigger Property="IsReadOnly" Value="True">
        <Setter TargetName="PART_ClearTextButton" Property="IsEnabled" Value="False" />
      </Trigger>
      <Trigger Property="Validation.HasError" Value="true">
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Quan.Brushes.Error}" />
      </Trigger>
      <Trigger SourceName="PART_ClearTextButton" Property="IsMouseOver" Value="True">
        <Setter TargetName="PART_ClearTextButton" Property="Background" Value="{DynamicResource Quan.Brushes.Gray8}" />
        <Setter TargetName="PART_ClearTextButton" Property="Foreground" Value="{DynamicResource Quan.Brushes.LightPrimary}" />
      </Trigger>
      <Trigger SourceName="PART_ClearTextButton" Property="IsPressed" Value="True">
        <Setter TargetName="PART_ClearTextButton" Property="Background" Value="{DynamicResource Quan.Brushes.Foreground}" />
        <Setter TargetName="PART_ClearTextButton" Property="Foreground" Value="{DynamicResource Quan.Brushes.Background}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="local:TextBoxHelper.HasText" Value="False" />
          <Condition Property="IsFocused" Value="True" />
        </MultiTrigger.Conditions>
        <MultiTrigger.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource Quan.Storyboards.TextBox.GotFocus}" />
        </MultiTrigger.EnterActions>
        <MultiTrigger.ExitActions>
          <BeginStoryboard Storyboard="{StaticResource Quan.Storyboards.TextBox.LostFocus}" />
        </MultiTrigger.ExitActions>
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="Quan.Styles.QuanTextBox.Default" TargetType="{x:Type local:QuanTextBox}">
    <Setter Property="FontFamily" Value="{StaticResource Quan.Fonts.Regular}" />
    <Setter Property="FontSize" Value="{StaticResource Quan.FontSize.Regular}" />
    <Setter Property="BorderBrush" Value="{DynamicResource Quan.Brushes.Border}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Background" Value="{DynamicResource Quan.Brushes.Background}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Padding" Value="3,0" />
    <Setter Property="MinHeight" Value="26" />
    <Setter Property="Template" Value="{StaticResource Quan.Templates.QuanTextBox.Default}" />
    <Setter Property="Validation.ErrorTemplate" Value="{StaticResource QuanTextBox.ValidationTemplate}" />
    <Setter Property="local:TextBoxHelper.IsMonitoring" Value="True" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
  </Style>
  <Style BasedOn="{StaticResource Quan.Styles.QuanTextBox.Default}" TargetType="{x:Type local:QuanTextBox}" />
  <WindowChrome x:Key="DefaultWindowChrome" CaptionHeight="{StaticResource TitleBarHeight}" CornerRadius="0" GlassFrameThickness="0,1,0,0" UseAeroCaptionButtons="False" />
  <ControlTemplate x:Key="Quan.Templates.QuanWindow.Default" TargetType="{x:Type local:QuanWindow}">
    <!--  Window border  -->
    <Border x:Name="MainBorder" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
      <!--  The window content  -->
      <Grid>
        <Grid.RowDefinitions>
          <!--  Title Bar  -->
          <RowDefinition Height="Auto" />
          <!--  Window Content  -->
          <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <!--  Title Bar  -->
        <Grid Grid.Row="0" Height="{StaticResource TitleBarHeight}">
          <Grid.ColumnDefinitions>
            <!--  Icon  -->
            <ColumnDefinition Width="Auto" />
            <!--  Title  -->
            <ColumnDefinition Width="*" />
            <!--  Windows Button  -->
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <!--  icon  -->
          <Image x:Name="PART_Icon" Width="22" Height="22" Margin="5,0" VerticalAlignment="Center" Focusable="False" Source="{TemplateBinding Icon}" Visibility="{Binding ShowIconOnTitleBar, RelativeSource={RelativeSource TemplatedParent}, Converter={local:BooleanToCollapsedConverter}}" WindowChrome.IsHitTestVisibleInChrome="True" />
          <!--  Title  -->
          <ContentControl x:Name="PART_Title" Grid.Column="1" VerticalContentAlignment="Center" Content="{TemplateBinding Title}" ContentTemplate="{TemplateBinding TitleTemplate}" Focusable="False" Style="{StaticResource Quan.Styles.ContentControl.Default}" />
          <StackPanel Grid.Column="2" Orientation="Horizontal" WindowChrome.IsHitTestVisibleInChrome="True">
            <Button x:Name="PART_MinButton" Width="46" Height="{StaticResource TitleBarHeight}" local:IconHelper.Geometry="{StaticResource WindowMinGeometry}" local:IconHelper.Height="10" local:IconHelper.Width="10" BorderThickness="1,0" Command="{x:Static SystemCommands.MinimizeWindowCommand}" Focusable="False" IsEnabled="{Binding IsMinButtonEnabled, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource Quan.Styles.Button.Icon}" />
            <Button x:Name="PART_MaxButton" Width="46" Height="{StaticResource TitleBarHeight}" local:IconHelper.Geometry="{StaticResource WindowMaxGeometry}" local:IconHelper.Height="10" local:IconHelper.Width="10" BorderThickness="1,0" Command="{x:Static SystemCommands.MaximizeWindowCommand}" Focusable="False" IsEnabled="{Binding IsMaxButtonEnabled, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource Quan.Styles.Button.Icon}" />
            <Button x:Name="PART_RestoreButton" Width="46" Height="{StaticResource TitleBarHeight}" local:IconHelper.Geometry="{StaticResource WindowRestoreGeometry}" local:IconHelper.Height="10" local:IconHelper.Width="10" BorderThickness="1,0" Command="{x:Static SystemCommands.RestoreWindowCommand}" Focusable="False" IsEnabled="{Binding IsMaxButtonEnabled, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource Quan.Styles.Button.Icon}" />
            <Button x:Name="PART_CloseButton" Width="46" Height="{StaticResource TitleBarHeight}" local:IconHelper.Geometry="{StaticResource CloseGeometry}" local:IconHelper.Height="10" local:IconHelper.Width="10" BorderThickness="1,0,0,0" Command="{x:Static SystemCommands.CloseWindowCommand}" Focusable="False" IsEnabled="{Binding IsCloseButtonEnabled, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource Quan.Styles.Button.Icon}" />
          </StackPanel>
        </Grid>
        <!--  Main Content  -->
        <Border x:Name="PART_MainContentBorder" Grid.Row="1" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderThickness="0">
          <AdornerDecorator>
            <ContentPresenter />
          </AdornerDecorator>
        </Border>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="WindowState" Value="Maximized">
        <Setter TargetName="PART_MaxButton" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_RestoreButton" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="WindowState" Value="Normal">
        <Setter TargetName="PART_MaxButton" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_RestoreButton" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger SourceName="PART_MinButton" Property="IsMouseOver" Value="True">
        <Setter TargetName="PART_MinButton" Property="Background" Value="{DynamicResource Quan.Brushes.IconHover}" />
      </Trigger>
      <Trigger SourceName="PART_MaxButton" Property="IsMouseOver" Value="True">
        <Setter TargetName="PART_MaxButton" Property="Background" Value="{DynamicResource Quan.Brushes.IconHover}" />
      </Trigger>
      <Trigger SourceName="PART_RestoreButton" Property="IsMouseOver" Value="True">
        <Setter TargetName="PART_RestoreButton" Property="Background" Value="{DynamicResource Quan.Brushes.IconHover}" />
      </Trigger>
      <Trigger SourceName="PART_CloseButton" Property="IsMouseOver" Value="True">
        <Setter TargetName="PART_CloseButton" Property="Background" Value="Red" />
        <Setter TargetName="PART_CloseButton" Property="Foreground" Value="{DynamicResource Quan.Brushes.IconForeground}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="Quan.Styles.QuanWindow.Default" TargetType="{x:Type local:QuanWindow}">
    <Setter Property="Background" Value="{DynamicResource Quan.Brushes.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource Quan.Brushes.WindowBorder}" />
    <Setter Property="FontFamily" Value="{StaticResource Quan.Fonts.Regular}" />
    <Setter Property="FontSize" Value="{StaticResource Quan.FontSize.Regular}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Foreground" Value="{DynamicResource Quan.Brushes.Foreground}" />
    <Setter Property="UseLayoutRounding" Value="True" />
    <Setter Property="Template" Value="{StaticResource Quan.Templates.QuanWindow.Default}" />
    <Setter Property="WindowChrome.WindowChrome" Value="{StaticResource DefaultWindowChrome}" />
    <Setter Property="TextElement.FontSize" Value="{StaticResource Quan.FontSize.Regular}" />
    <Setter Property="local:WindowHelper.FixMaximizedWindow" Value="True" />
    <Style.Triggers>
      <Trigger Property="WindowChrome.WindowChrome" Value="{x:Null}">
        <Setter Property="local:WindowHelper.FixMaximizedWindow" Value="False" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style BasedOn="{StaticResource Quan.Styles.QuanWindow.Default}" TargetType="{x:Type local:QuanWindow}" />
</ResourceDictionary>